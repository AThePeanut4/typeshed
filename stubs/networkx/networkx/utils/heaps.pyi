"""Min-heaps."""

from _typeshed import Incomplete

__all__ = ["MinHeap", "PairingHeap", "BinaryHeap"]

class MinHeap:
    """
    Base class for min-heaps.

    A MinHeap stores a collection of key-value pairs ordered by their values.
    It supports querying the minimum pair, inserting a new pair, decreasing the
    value in an existing pair and deleting the minimum pair.
    """
    class _Item:
        """Used by subclassess to represent a key-value pair."""
        key: Incomplete
        value: Incomplete
        def __init__(self, key, value) -> None: ...

    def __init__(self) -> None: ...
    def min(self) -> None: ...
    def pop(self) -> None: ...
    def get(self, key, default=None) -> None: ...
    def insert(self, key, value, allow_increase: bool = False) -> None: ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...

class PairingHeap(MinHeap):
    """A pairing heap."""
    class _Node(MinHeap._Item):
        """
        A node in a pairing heap.

        A tree in a pairing heap is stored using the left-child, right-sibling
        representation.
        """
        left: Incomplete
        next: Incomplete
        prev: Incomplete
        parent: Incomplete
        def __init__(self, key, value) -> None: ...

    def __init__(self) -> None:
        """Initialize a pairing heap."""
        ...
    def min(self): ...
    def pop(self): ...
    def get(self, key, default=None): ...
    def insert(self, key, value, allow_increase: bool = False): ...

class BinaryHeap(MinHeap):
    """A binary heap."""
    def __init__(self) -> None:
        """Initialize a binary heap."""
        ...
    def min(self): ...
    def pop(self): ...
    def get(self, key, default=None): ...
    def insert(self, key, value, allow_increase: bool = False): ...
