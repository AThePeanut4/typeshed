"""
Generate the dates of common North American and Jewish holidays.

Jewish holidays begin the sunset before the first (secular) day of the holiday
With the ``eve`` option set to ``True``, the day of this sunset is returned
without the ``eve`` option, the (secular) day is returned. This is the default.
"""

from typing import Final, Literal
from typing_extensions import deprecated

MON: Final = 0
TUE: Final = 1
WED: Final = 2
THU: Final = 3
FRI: Final = 4
SAT: Final = 5
SUN: Final = 6
JAN: Final = 1
FEB: Final = 2
MAR: Final = 3
APR: Final = 4
MAY: Final = 5
JUN: Final = 6
JUL: Final = 7
AUG: Final = 8
SEP: Final = 9
OCT: Final = 10
NOV: Final = 11
DEC: Final = 12

def new_years(year: int, observed: bool | None = None) -> tuple[int, int, int]:
    """Jan 1st, possibly observed on last day of previous year"""
    ...
def martin_luther_king_day(year: int) -> tuple[int, int, int]:
    """third monday in January"""
    ...
def lincolns_birthday(year: int) -> tuple[int, int, int]:
    """Feb 12"""
    ...
def valentines_day(year: int) -> tuple[int, int, int]:
    """feb 14th"""
    ...
def washingtons_birthday(year: int, observed: bool | None = None) -> tuple[int, int, int]:
    """Feb 22, possibly observed on 3rd Monday in February"""
    ...
def presidents_day(year: int) -> tuple[int, int, int]:
    """3rd Monday of Feb"""
    ...
def pulaski_day(year: int) -> tuple[int, int, int]:
    """1st monday in March"""
    ...
def easter(year: int, church: Literal["western", "orthodox", "eastern"] | None = None) -> tuple[int, int, int]:
    """Calculate Easter in the given church according to the given calendar."""
    ...
def may_day(year: int) -> tuple[int, int, int]: ...
def mothers_day(year: int) -> tuple[int, int, int]:
    """2nd Sunday in May"""
    ...
def memorial_day(year: int) -> tuple[int, int, int]:
    """last Monday in May"""
    ...
def fathers_day(year: int) -> tuple[int, int, int]:
    """3rd Sunday in June"""
    ...
def juneteenth(year: int) -> tuple[int, int, int]:
    """19th of June"""
    ...
def flag_day(year: int) -> tuple[int, int, int]:
    """June 14th"""
    ...
def independence_day(year: int, observed: bool | None = None) -> tuple[int, int, int]:
    """
    Independence Day in the United States, celebrated on July 4th.
    May be observed on the previous or following day if it occurs on a Saturday
    or Sunday.

    Arguments:
        year (int): Gregorian year
        observed (boolean): If ``True``, return the date of observation.
    """
    ...
def labor_day(year: int) -> tuple[int, int, int]:
    """first Monday in Sep"""
    ...
def indigenous_peoples_day(year: int, country: str = "usa") -> tuple[int, int, int]:
    """Celebrated on the second Monday in October in the United States."""
    ...
@deprecated("The `columbus_day` function will be removed in a future release. Use `indigenous_peoples_day` instead.")
def columbus_day(year: int, country: str = "usa") -> tuple[int, int, int]: ...
def halloween(year: int) -> tuple[int, int, int]:
    """Halloween is celebrated on October 31st."""
    ...
def election_day(year: int) -> tuple[int, int, int]:
    """
    In most jurisdictions in the United States, Election day occurs on
    the first Tuesday in November.
    """
    ...
def veterans_day(year: int, observed: bool | None = None) -> tuple[int, int, int]:
    """Nov 11, or the following closest weekday"""
    ...
def rememberance_day(year: int) -> tuple[int, int, int]: ...
def armistice_day(year: int) -> tuple[int, int, int]: ...
def thanksgiving(year: int, country: Literal["usa", "canada"] = "usa") -> tuple[int, int, int]:
    """
    In the United States, Thanksgiving is celebrated on the last Thursday
    of November. In Canada, on the second Monday of October.

    Arguments:
        year (int): Gregorian year
        country (str): either ``'usa'`` (default) or ``'canada'``
    """
    ...
def christmas_eve(year: int) -> tuple[int, int, int]:
    """The day before Christmas, or 24th of December."""
    ...
def christmas(year: int, observed: bool | None = None) -> tuple[int, int, int]:
    """
    Christmas is celebrated on the 25th of December. For the purposes of
    business closings, it may be observed on the previous or following day if
    the 25th falls on a Saturday or Sunday, respectively.

    Arguments:
        year (int): Gregorian year
        observed (boolean): If ``True``, return the date of observation.
    """
    ...
def new_years_eve(year: int) -> tuple[int, int, int]:
    """The last day of the Gregorian year, December. 31st."""
    ...
def hanukkah(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def purim(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def rosh_hashanah(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def yom_kippur(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def passover(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def shavuot(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def sukkot(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """
    Sukkot, the Feast of Tabernacles or Festival of Shelters, is celebrated on
    the 15th of Tishri.
    """
    ...
def shemini_azeret(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def lag_baomer(year: int, eve: bool | None = None) -> tuple[int, int, int]: ...
def tu_beshvat(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """Tu BeShvat, the 'New Year of Trees', is celebrated on the 15th of Shevat."""
    ...
def tisha_bav(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """
    Tisha B'Av is a fast day generally celebrated on the 9th of Av, but
    sometimes postponed to the following day.
    """
    ...
def dia_constitucion(year: int, observed: bool | None = True) -> tuple[int, int, int]:
    """
    Constitution Day, a public holiday in Mexico observed
    on the first Monday in February.
    """
    ...
def natalicio_benito_juarez(year: int, observed: bool | None = True) -> tuple[int, int, int]:
    """
    Benito Juárez's Birthday, a public holiday in Mexico observed
    on the third Monday in March.
    """
    ...
def dia_independencia(year: int) -> tuple[int, int, int]:
    """Mexican independence day, observed on September 16."""
    ...
def dia_revolucion(year: int) -> tuple[int, int, int]:
    """
    Revolution Day, a public holiday in Mexico observed
    on the third Monday in November.
    """
    ...
def ramadan(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """The first day of Ramadan, the month of fasting in the Islamic calendar."""
    ...
def ashura(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """
    Ashura is celebrated on the tenth day of Muharram, the first month in the
    Islamic calendar.
    """
    ...
def eid_alfitr(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """
    Eid al-Fitr, the 'Festival of Breaking the Fast' is celebrated the first
    day of the month of Shawwāl.
    """
    ...
def eid_aladha(year: int, eve: bool | None = None) -> tuple[int, int, int]:
    """
    Eid al-Adha, the 'Festival of the Sacrifice' begins on the tenth
    day of the month of Zū al-Ḥijjah.
    """
    ...

class Holidays:
    """Convenience class for fetching many holidays in a given year."""
    year: int
    def __init__(self, year: int | None = None) -> None: ...
    def set_year(self, year: int) -> None: ...
    @property
    def christmas(self) -> tuple[int, int, int]: ...
    @property
    def christmas_eve(self) -> tuple[int, int, int]: ...
    @property
    def thanksgiving(self) -> tuple[int, int, int]: ...
    @property
    def new_years(self) -> tuple[int, int, int]: ...
    @property
    def new_years_eve(self) -> tuple[int, int, int]: ...
    @property
    def independence_day(self) -> tuple[int, int, int]: ...
    @property
    def flag_day(self) -> tuple[int, int, int]: ...
    @property
    def election_day(self) -> tuple[int, int, int]: ...
    @property
    def presidents_day(self) -> tuple[int, int, int]: ...
    @property
    def washingtons_birthday(self) -> tuple[int, int, int]: ...
    @property
    def lincolns_birthday(self) -> tuple[int, int, int]: ...
    @property
    def memorial_day(self) -> tuple[int, int, int]: ...
    @property
    def juneteenth(self) -> tuple[int, int, int]: ...
    @property
    def labor_day(self) -> tuple[int, int, int]: ...
    @property
    def indigenous_peoples_day(self) -> tuple[int, int, int]: ...
    @property
    def columbus_day(self) -> tuple[int, int, int]: ...
    @property
    def veterans_day(self) -> tuple[int, int, int]: ...
    @property
    def valentines_day(self) -> tuple[int, int, int]: ...
    @property
    def halloween(self) -> tuple[int, int, int]: ...
    @property
    def mothers_day(self) -> tuple[int, int, int]: ...
    @property
    def fathers_day(self) -> tuple[int, int, int]: ...
    @property
    def pulaski_day(self) -> tuple[int, int, int]: ...
    @property
    def easter(self) -> tuple[int, int, int]: ...
    @property
    def martin_luther_king_day(self) -> tuple[int, int, int]: ...
    @property
    def hanukkah(self) -> tuple[int, int, int]: ...
    @property
    def purim(self) -> tuple[int, int, int]: ...
    @property
    def rosh_hashanah(self) -> tuple[int, int, int]: ...
    @property
    def yom_kippur(self) -> tuple[int, int, int]: ...
    @property
    def passover(self) -> tuple[int, int, int]: ...
    @property
    def shavuot(self) -> tuple[int, int, int]: ...
    @property
    def sukkot(self) -> tuple[int, int, int]: ...
    @property
    def tu_beshvat(self) -> tuple[int, int, int]: ...
    @property
    def shemini_azeret(self) -> tuple[int, int, int]: ...
    @property
    def lag_baomer(self) -> tuple[int, int, int]: ...
    @property
    def tisha_bav(self) -> tuple[int, int, int]: ...
    @property
    def dia_constitucion(self) -> tuple[int, int, int]: ...
    @property
    def natalicio_benito_juarez(self) -> tuple[int, int, int]: ...
    @property
    def dia_independencia(self) -> tuple[int, int, int]: ...
    @property
    def dia_revolucion(self) -> tuple[int, int, int]: ...
    @property
    def ramadan(self) -> tuple[int, int, int]: ...
    @property
    def ashura(self) -> tuple[int, int, int]: ...
    @property
    def eid_alfitr(self) -> tuple[int, int, int]: ...
    @property
    def eid_aladha(self) -> tuple[int, int, int]: ...
