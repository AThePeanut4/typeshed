"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class DecimalPlaces:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(self, is_enforced: Incomplete | None = None, digits: Incomplete | None = None) -> None:
        """DecimalPlaces - a model defined in OpenAPI."""
        ...
    @property
    def is_enforced(self):
        """
        Get the is_enforced of this DecimalPlaces.

        Indicates whether decimal point setting should be enforced

        :return: The is_enforced of this DecimalPlaces.
        :rtype: bool
        """
        ...
    @is_enforced.setter
    def is_enforced(self, is_enforced) -> None:
        """
        Get the is_enforced of this DecimalPlaces.

        Indicates whether decimal point setting should be enforced

        :return: The is_enforced of this DecimalPlaces.
        :rtype: bool
        """
        ...
    @property
    def digits(self):
        """
        Get the digits of this DecimalPlaces.

        The number of digits after decimal to display

        :return: The digits of this DecimalPlaces.
        :rtype: int
        """
        ...
    @digits.setter
    def digits(self, digits) -> None:
        """
        Get the digits of this DecimalPlaces.

        The number of digits after decimal to display

        :return: The digits of this DecimalPlaces.
        :rtype: int
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
