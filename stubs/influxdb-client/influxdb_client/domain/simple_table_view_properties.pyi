"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.view_properties import ViewProperties

class SimpleTableViewProperties(ViewProperties):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        type: Incomplete | None = None,
        show_all: Incomplete | None = None,
        queries: Incomplete | None = None,
        shape: Incomplete | None = None,
        note: Incomplete | None = None,
        show_note_when_empty: Incomplete | None = None,
    ) -> None:
        """SimpleTableViewProperties - a model defined in OpenAPI."""
        ...
    @property
    def type(self):
        """
        Get the type of this SimpleTableViewProperties.

        :return: The type of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this SimpleTableViewProperties.

        :return: The type of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @property
    def show_all(self):
        """
        Get the show_all of this SimpleTableViewProperties.

        :return: The show_all of this SimpleTableViewProperties.
        :rtype: bool
        """
        ...
    @show_all.setter
    def show_all(self, show_all) -> None:
        """
        Get the show_all of this SimpleTableViewProperties.

        :return: The show_all of this SimpleTableViewProperties.
        :rtype: bool
        """
        ...
    @property
    def queries(self):
        """
        Get the queries of this SimpleTableViewProperties.

        :return: The queries of this SimpleTableViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @queries.setter
    def queries(self, queries) -> None:
        """
        Get the queries of this SimpleTableViewProperties.

        :return: The queries of this SimpleTableViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @property
    def shape(self):
        """
        Get the shape of this SimpleTableViewProperties.

        :return: The shape of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @shape.setter
    def shape(self, shape) -> None:
        """
        Get the shape of this SimpleTableViewProperties.

        :return: The shape of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @property
    def note(self):
        """
        Get the note of this SimpleTableViewProperties.

        :return: The note of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @note.setter
    def note(self, note) -> None:
        """
        Get the note of this SimpleTableViewProperties.

        :return: The note of this SimpleTableViewProperties.
        :rtype: str
        """
        ...
    @property
    def show_note_when_empty(self):
        """
        Get the show_note_when_empty of this SimpleTableViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this SimpleTableViewProperties.
        :rtype: bool
        """
        ...
    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty) -> None:
        """
        Get the show_note_when_empty of this SimpleTableViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this SimpleTableViewProperties.
        :rtype: bool
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
