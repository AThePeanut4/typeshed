"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.view_properties import ViewProperties

class CheckViewProperties(ViewProperties):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        adaptive_zoom_hide: bool | None = None,
        type: Incomplete | None = None,
        shape: Incomplete | None = None,
        check_id: Incomplete | None = None,
        check: Incomplete | None = None,
        queries: Incomplete | None = None,
        colors: Incomplete | None = None,
        legend_colorize_rows: Incomplete | None = None,
        legend_hide: Incomplete | None = None,
        legend_opacity: Incomplete | None = None,
        legend_orientation_threshold: Incomplete | None = None,
    ) -> None:
        """CheckViewProperties - a model defined in OpenAPI."""
        ...
    adaptive_zoom_hide: bool | None
    @property
    def type(self):
        """
        Get the type of this CheckViewProperties.

        :return: The type of this CheckViewProperties.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this CheckViewProperties.

        :return: The type of this CheckViewProperties.
        :rtype: str
        """
        ...
    @property
    def shape(self):
        """
        Get the shape of this CheckViewProperties.

        :return: The shape of this CheckViewProperties.
        :rtype: str
        """
        ...
    @shape.setter
    def shape(self, shape) -> None:
        """
        Get the shape of this CheckViewProperties.

        :return: The shape of this CheckViewProperties.
        :rtype: str
        """
        ...
    @property
    def check_id(self):
        """
        Get the check_id of this CheckViewProperties.

        :return: The check_id of this CheckViewProperties.
        :rtype: str
        """
        ...
    @check_id.setter
    def check_id(self, check_id) -> None:
        """
        Get the check_id of this CheckViewProperties.

        :return: The check_id of this CheckViewProperties.
        :rtype: str
        """
        ...
    @property
    def check(self):
        """
        Get the check of this CheckViewProperties.

        :return: The check of this CheckViewProperties.
        :rtype: Check
        """
        ...
    @check.setter
    def check(self, check) -> None:
        """
        Get the check of this CheckViewProperties.

        :return: The check of this CheckViewProperties.
        :rtype: Check
        """
        ...
    @property
    def queries(self):
        """
        Get the queries of this CheckViewProperties.

        :return: The queries of this CheckViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @queries.setter
    def queries(self, queries) -> None:
        """
        Get the queries of this CheckViewProperties.

        :return: The queries of this CheckViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @property
    def colors(self):
        """
        Get the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this CheckViewProperties.
        :rtype: list[DashboardColor]
        """
        ...
    @colors.setter
    def colors(self, colors) -> None:
        """
        Get the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this CheckViewProperties.
        :rtype: list[DashboardColor]
        """
        ...
    @property
    def legend_colorize_rows(self):
        """
        Get the legend_colorize_rows of this CheckViewProperties.

        :return: The legend_colorize_rows of this CheckViewProperties.
        :rtype: bool
        """
        ...
    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows) -> None:
        """
        Get the legend_colorize_rows of this CheckViewProperties.

        :return: The legend_colorize_rows of this CheckViewProperties.
        :rtype: bool
        """
        ...
    @property
    def legend_hide(self):
        """
        Get the legend_hide of this CheckViewProperties.

        :return: The legend_hide of this CheckViewProperties.
        :rtype: bool
        """
        ...
    @legend_hide.setter
    def legend_hide(self, legend_hide) -> None:
        """
        Get the legend_hide of this CheckViewProperties.

        :return: The legend_hide of this CheckViewProperties.
        :rtype: bool
        """
        ...
    @property
    def legend_opacity(self):
        """
        Get the legend_opacity of this CheckViewProperties.

        :return: The legend_opacity of this CheckViewProperties.
        :rtype: float
        """
        ...
    @legend_opacity.setter
    def legend_opacity(self, legend_opacity) -> None:
        """
        Get the legend_opacity of this CheckViewProperties.

        :return: The legend_opacity of this CheckViewProperties.
        :rtype: float
        """
        ...
    @property
    def legend_orientation_threshold(self):
        """
        Get the legend_orientation_threshold of this CheckViewProperties.

        :return: The legend_orientation_threshold of this CheckViewProperties.
        :rtype: int
        """
        ...
    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold) -> None:
        """
        Get the legend_orientation_threshold of this CheckViewProperties.

        :return: The legend_orientation_threshold of this CheckViewProperties.
        :rtype: int
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
