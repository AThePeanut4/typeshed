"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class ScraperTargetRequest:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        name: Incomplete | None = None,
        type: Incomplete | None = None,
        url: Incomplete | None = None,
        org_id: Incomplete | None = None,
        bucket_id: Incomplete | None = None,
        allow_insecure: bool = False,
    ) -> None:
        """ScraperTargetRequest - a model defined in OpenAPI."""
        ...
    @property
    def name(self):
        """
        Get the name of this ScraperTargetRequest.

        The name of the scraper target.

        :return: The name of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @name.setter
    def name(self, name) -> None:
        """
        Get the name of this ScraperTargetRequest.

        The name of the scraper target.

        :return: The name of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @property
    def type(self):
        """
        Get the type of this ScraperTargetRequest.

        The type of the metrics to be parsed.

        :return: The type of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this ScraperTargetRequest.

        The type of the metrics to be parsed.

        :return: The type of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @property
    def url(self):
        """
        Get the url of this ScraperTargetRequest.

        The URL of the metrics endpoint.

        :return: The url of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @url.setter
    def url(self, url) -> None:
        """
        Get the url of this ScraperTargetRequest.

        The URL of the metrics endpoint.

        :return: The url of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @property
    def org_id(self):
        """
        Get the org_id of this ScraperTargetRequest.

        The organization ID.

        :return: The org_id of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id) -> None:
        """
        Get the org_id of this ScraperTargetRequest.

        The organization ID.

        :return: The org_id of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @property
    def bucket_id(self):
        """
        Get the bucket_id of this ScraperTargetRequest.

        The ID of the bucket to write to.

        :return: The bucket_id of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @bucket_id.setter
    def bucket_id(self, bucket_id) -> None:
        """
        Get the bucket_id of this ScraperTargetRequest.

        The ID of the bucket to write to.

        :return: The bucket_id of this ScraperTargetRequest.
        :rtype: str
        """
        ...
    @property
    def allow_insecure(self):
        """
        Get the allow_insecure of this ScraperTargetRequest.

        Skip TLS verification on endpoint.

        :return: The allow_insecure of this ScraperTargetRequest.
        :rtype: bool
        """
        ...
    @allow_insecure.setter
    def allow_insecure(self, allow_insecure) -> None:
        """
        Get the allow_insecure of this ScraperTargetRequest.

        Skip TLS verification on endpoint.

        :return: The allow_insecure of this ScraperTargetRequest.
        :rtype: bool
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
