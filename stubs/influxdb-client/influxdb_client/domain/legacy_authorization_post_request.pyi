"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.authorization_update_request import AuthorizationUpdateRequest

class LegacyAuthorizationPostRequest(AuthorizationUpdateRequest):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        org_id: Incomplete | None = None,
        user_id: Incomplete | None = None,
        token: Incomplete | None = None,
        permissions: Incomplete | None = None,
        status: str = "active",
        description: Incomplete | None = None,
    ) -> None:
        """LegacyAuthorizationPostRequest - a model defined in OpenAPI."""
        ...
    @property
    def org_id(self):
        """
        Get the org_id of this LegacyAuthorizationPostRequest.

        ID of org that authorization is scoped to.

        :return: The org_id of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id) -> None:
        """
        Get the org_id of this LegacyAuthorizationPostRequest.

        ID of org that authorization is scoped to.

        :return: The org_id of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @property
    def user_id(self):
        """
        Get the user_id of this LegacyAuthorizationPostRequest.

        ID of user that authorization is scoped to.

        :return: The user_id of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @user_id.setter
    def user_id(self, user_id) -> None:
        """
        Get the user_id of this LegacyAuthorizationPostRequest.

        ID of user that authorization is scoped to.

        :return: The user_id of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @property
    def token(self):
        """
        Get the token of this LegacyAuthorizationPostRequest.

        Token (name) of the authorization

        :return: The token of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @token.setter
    def token(self, token) -> None:
        """
        Get the token of this LegacyAuthorizationPostRequest.

        Token (name) of the authorization

        :return: The token of this LegacyAuthorizationPostRequest.
        :rtype: str
        """
        ...
    @property
    def permissions(self):
        """
        Get the permissions of this LegacyAuthorizationPostRequest.

        List of permissions for an auth.  An auth must have at least one Permission.

        :return: The permissions of this LegacyAuthorizationPostRequest.
        :rtype: list[Permission]
        """
        ...
    @permissions.setter
    def permissions(self, permissions) -> None:
        """
        Get the permissions of this LegacyAuthorizationPostRequest.

        List of permissions for an auth.  An auth must have at least one Permission.

        :return: The permissions of this LegacyAuthorizationPostRequest.
        :rtype: list[Permission]
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
