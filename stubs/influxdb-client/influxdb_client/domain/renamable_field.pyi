"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class RenamableField:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self, internal_name: Incomplete | None = None, display_name: Incomplete | None = None, visible: Incomplete | None = None
    ) -> None:
        """RenamableField - a model defined in OpenAPI."""
        ...
    @property
    def internal_name(self):
        """
        Get the internal_name of this RenamableField.

        The calculated name of a field.

        :return: The internal_name of this RenamableField.
        :rtype: str
        """
        ...
    @internal_name.setter
    def internal_name(self, internal_name) -> None:
        """
        Get the internal_name of this RenamableField.

        The calculated name of a field.

        :return: The internal_name of this RenamableField.
        :rtype: str
        """
        ...
    @property
    def display_name(self):
        """
        Get the display_name of this RenamableField.

        The name that a field is renamed to by the user.

        :return: The display_name of this RenamableField.
        :rtype: str
        """
        ...
    @display_name.setter
    def display_name(self, display_name) -> None:
        """
        Get the display_name of this RenamableField.

        The name that a field is renamed to by the user.

        :return: The display_name of this RenamableField.
        :rtype: str
        """
        ...
    @property
    def visible(self):
        """
        Get the visible of this RenamableField.

        Indicates whether this field should be visible on the table.

        :return: The visible of this RenamableField.
        :rtype: bool
        """
        ...
    @visible.setter
    def visible(self, visible) -> None:
        """
        Get the visible of this RenamableField.

        Indicates whether this field should be visible on the table.

        :return: The visible of this RenamableField.
        :rtype: bool
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
