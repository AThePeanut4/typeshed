"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class DBRP:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        id: Incomplete | None = None,
        org_id: Incomplete | None = None,
        bucket_id: Incomplete | None = None,
        database: Incomplete | None = None,
        retention_policy: Incomplete | None = None,
        default: Incomplete | None = None,
        virtual: bool | None = None,
        links: Incomplete | None = None,
    ) -> None:
        """DBRP - a model defined in OpenAPI."""
        ...
    @property
    def id(self):
        """
        Get the id of this DBRP.

        The resource ID that InfluxDB uses to uniquely identify the database retention policy (DBRP) mapping.

        :return: The id of this DBRP.
        :rtype: str
        """
        ...
    @id.setter
    def id(self, id) -> None:
        """
        Get the id of this DBRP.

        The resource ID that InfluxDB uses to uniquely identify the database retention policy (DBRP) mapping.

        :return: The id of this DBRP.
        :rtype: str
        """
        ...
    @property
    def org_id(self):
        """
        Get the org_id of this DBRP.

        An organization ID. Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the mapping.

        :return: The org_id of this DBRP.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id) -> None:
        """
        Get the org_id of this DBRP.

        An organization ID. Identifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that owns the mapping.

        :return: The org_id of this DBRP.
        :rtype: str
        """
        ...
    @property
    def bucket_id(self):
        """
        Get the bucket_id of this DBRP.

        A bucket ID. Identifies the bucket used as the target for the translation.

        :return: The bucket_id of this DBRP.
        :rtype: str
        """
        ...
    @bucket_id.setter
    def bucket_id(self, bucket_id) -> None:
        """
        Get the bucket_id of this DBRP.

        A bucket ID. Identifies the bucket used as the target for the translation.

        :return: The bucket_id of this DBRP.
        :rtype: str
        """
        ...
    @property
    def database(self):
        """
        Get the database of this DBRP.

        A database name. Identifies the InfluxDB v1 database.

        :return: The database of this DBRP.
        :rtype: str
        """
        ...
    @database.setter
    def database(self, database) -> None:
        """
        Get the database of this DBRP.

        A database name. Identifies the InfluxDB v1 database.

        :return: The database of this DBRP.
        :rtype: str
        """
        ...
    @property
    def retention_policy(self):
        """
        Get the retention_policy of this DBRP.

        A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp) name. Identifies the InfluxDB v1 retention policy mapping.

        :return: The retention_policy of this DBRP.
        :rtype: str
        """
        ...
    @retention_policy.setter
    def retention_policy(self, retention_policy) -> None:
        """
        Get the retention_policy of this DBRP.

        A [retention policy](https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#retention-policy-rp) name. Identifies the InfluxDB v1 retention policy mapping.

        :return: The retention_policy of this DBRP.
        :rtype: str
        """
        ...
    @property
    def default(self):
        """
        Get the default of this DBRP.

        If set to `true`, this DBRP mapping is the default retention policy for the database (specified by the `database` property's value).

        :return: The default of this DBRP.
        :rtype: bool
        """
        ...
    @default.setter
    def default(self, default) -> None:
        """
        Get the default of this DBRP.

        If set to `true`, this DBRP mapping is the default retention policy for the database (specified by the `database` property's value).

        :return: The default of this DBRP.
        :rtype: bool
        """
        ...
    virtual: bool | None
    @property
    def links(self):
        """
        Get the links of this DBRP.

        :return: The links of this DBRP.
        :rtype: Links
        """
        ...
    @links.setter
    def links(self, links) -> None:
        """
        Get the links of this DBRP.

        :return: The links of this DBRP.
        :rtype: Links
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
