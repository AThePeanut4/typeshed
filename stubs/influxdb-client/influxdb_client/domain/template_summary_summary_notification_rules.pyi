"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class TemplateSummarySummaryNotificationRules:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        kind: Incomplete | None = None,
        template_meta_name: Incomplete | None = None,
        name: Incomplete | None = None,
        description: Incomplete | None = None,
        endpoint_template_meta_name: Incomplete | None = None,
        endpoint_id: Incomplete | None = None,
        endpoint_type: Incomplete | None = None,
        every: Incomplete | None = None,
        offset: Incomplete | None = None,
        message_template: Incomplete | None = None,
        status: Incomplete | None = None,
        status_rules: Incomplete | None = None,
        tag_rules: Incomplete | None = None,
        label_associations: Incomplete | None = None,
        env_references: Incomplete | None = None,
    ) -> None:
        """TemplateSummarySummaryNotificationRules - a model defined in OpenAPI."""
        ...
    @property
    def kind(self):
        """
        Get the kind of this TemplateSummarySummaryNotificationRules.

        :return: The kind of this TemplateSummarySummaryNotificationRules.
        :rtype: TemplateKind
        """
        ...
    @kind.setter
    def kind(self, kind) -> None:
        """
        Get the kind of this TemplateSummarySummaryNotificationRules.

        :return: The kind of this TemplateSummarySummaryNotificationRules.
        :rtype: TemplateKind
        """
        ...
    @property
    def template_meta_name(self):
        """
        Get the template_meta_name of this TemplateSummarySummaryNotificationRules.

        :return: The template_meta_name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @template_meta_name.setter
    def template_meta_name(self, template_meta_name) -> None:
        """
        Get the template_meta_name of this TemplateSummarySummaryNotificationRules.

        :return: The template_meta_name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def name(self):
        """
        Get the name of this TemplateSummarySummaryNotificationRules.

        :return: The name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @name.setter
    def name(self, name) -> None:
        """
        Get the name of this TemplateSummarySummaryNotificationRules.

        :return: The name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def description(self):
        """
        Get the description of this TemplateSummarySummaryNotificationRules.

        :return: The description of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @description.setter
    def description(self, description) -> None:
        """
        Get the description of this TemplateSummarySummaryNotificationRules.

        :return: The description of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def endpoint_template_meta_name(self):
        """
        Get the endpoint_template_meta_name of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_template_meta_name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @endpoint_template_meta_name.setter
    def endpoint_template_meta_name(self, endpoint_template_meta_name) -> None:
        """
        Get the endpoint_template_meta_name of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_template_meta_name of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def endpoint_id(self):
        """
        Get the endpoint_id of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_id of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @endpoint_id.setter
    def endpoint_id(self, endpoint_id) -> None:
        """
        Get the endpoint_id of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_id of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def endpoint_type(self):
        """
        Get the endpoint_type of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_type of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @endpoint_type.setter
    def endpoint_type(self, endpoint_type) -> None:
        """
        Get the endpoint_type of this TemplateSummarySummaryNotificationRules.

        :return: The endpoint_type of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def every(self):
        """
        Get the every of this TemplateSummarySummaryNotificationRules.

        :return: The every of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @every.setter
    def every(self, every) -> None:
        """
        Get the every of this TemplateSummarySummaryNotificationRules.

        :return: The every of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def offset(self):
        """
        Get the offset of this TemplateSummarySummaryNotificationRules.

        :return: The offset of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @offset.setter
    def offset(self, offset) -> None:
        """
        Get the offset of this TemplateSummarySummaryNotificationRules.

        :return: The offset of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def message_template(self):
        """
        Get the message_template of this TemplateSummarySummaryNotificationRules.

        :return: The message_template of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @message_template.setter
    def message_template(self, message_template) -> None:
        """
        Get the message_template of this TemplateSummarySummaryNotificationRules.

        :return: The message_template of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def status(self):
        """
        Get the status of this TemplateSummarySummaryNotificationRules.

        :return: The status of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @status.setter
    def status(self, status) -> None:
        """
        Get the status of this TemplateSummarySummaryNotificationRules.

        :return: The status of this TemplateSummarySummaryNotificationRules.
        :rtype: str
        """
        ...
    @property
    def status_rules(self):
        """
        Get the status_rules of this TemplateSummarySummaryNotificationRules.

        :return: The status_rules of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummarySummaryStatusRules]
        """
        ...
    @status_rules.setter
    def status_rules(self, status_rules) -> None:
        """
        Get the status_rules of this TemplateSummarySummaryNotificationRules.

        :return: The status_rules of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummarySummaryStatusRules]
        """
        ...
    @property
    def tag_rules(self):
        """
        Get the tag_rules of this TemplateSummarySummaryNotificationRules.

        :return: The tag_rules of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummarySummaryTagRules]
        """
        ...
    @tag_rules.setter
    def tag_rules(self, tag_rules) -> None:
        """
        Get the tag_rules of this TemplateSummarySummaryNotificationRules.

        :return: The tag_rules of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummarySummaryTagRules]
        """
        ...
    @property
    def label_associations(self):
        """
        Get the label_associations of this TemplateSummarySummaryNotificationRules.

        :return: The label_associations of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummaryLabel]
        """
        ...
    @label_associations.setter
    def label_associations(self, label_associations) -> None:
        """
        Get the label_associations of this TemplateSummarySummaryNotificationRules.

        :return: The label_associations of this TemplateSummarySummaryNotificationRules.
        :rtype: list[TemplateSummaryLabel]
        """
        ...
    @property
    def env_references(self):
        """
        Get the env_references of this TemplateSummarySummaryNotificationRules.

        :return: The env_references of this TemplateSummarySummaryNotificationRules.
        :rtype: list[object]
        """
        ...
    @env_references.setter
    def env_references(self, env_references) -> None:
        """
        Get the env_references of this TemplateSummarySummaryNotificationRules.

        :return: The env_references of this TemplateSummarySummaryNotificationRules.
        :rtype: list[object]
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
