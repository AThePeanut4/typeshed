"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class Dialect:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        header: bool = True,
        delimiter: str = ",",
        annotations: Incomplete | None = None,
        comment_prefix: str = "#",
        date_time_format: str = "RFC3339",
    ) -> None:
        """Dialect - a model defined in OpenAPI."""
        ...
    @property
    def header(self):
        """
        Get the header of this Dialect.

        If true, the results contain a header row.

        :return: The header of this Dialect.
        :rtype: bool
        """
        ...
    @header.setter
    def header(self, header) -> None:
        """
        Get the header of this Dialect.

        If true, the results contain a header row.

        :return: The header of this Dialect.
        :rtype: bool
        """
        ...
    @property
    def delimiter(self):
        """
        Get the delimiter of this Dialect.

        The separator used between cells. Default is a comma (`,`).

        :return: The delimiter of this Dialect.
        :rtype: str
        """
        ...
    @delimiter.setter
    def delimiter(self, delimiter) -> None:
        """
        Get the delimiter of this Dialect.

        The separator used between cells. Default is a comma (`,`).

        :return: The delimiter of this Dialect.
        :rtype: str
        """
        ...
    @property
    def annotations(self):
        """
        Get the annotations of this Dialect.

        Annotation rows to include in the results. An _annotation_ is metadata associated with an object (column) in the data model.  #### Related guides  - See [Annotated CSV annotations](https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#annotations) for examples and more information.  For more information about **annotations** in tabular data, see [W3 metadata vocabulary for tabular data](https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns).

        :return: The annotations of this Dialect.
        :rtype: list[str]
        """
        ...
    @annotations.setter
    def annotations(self, annotations) -> None:
        """
        Get the annotations of this Dialect.

        Annotation rows to include in the results. An _annotation_ is metadata associated with an object (column) in the data model.  #### Related guides  - See [Annotated CSV annotations](https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#annotations) for examples and more information.  For more information about **annotations** in tabular data, see [W3 metadata vocabulary for tabular data](https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns).

        :return: The annotations of this Dialect.
        :rtype: list[str]
        """
        ...
    @property
    def comment_prefix(self):
        """
        Get the comment_prefix of this Dialect.

        The character prefixed to comment strings. Default is a number sign (`#`).

        :return: The comment_prefix of this Dialect.
        :rtype: str
        """
        ...
    @comment_prefix.setter
    def comment_prefix(self, comment_prefix) -> None:
        """
        Get the comment_prefix of this Dialect.

        The character prefixed to comment strings. Default is a number sign (`#`).

        :return: The comment_prefix of this Dialect.
        :rtype: str
        """
        ...
    @property
    def date_time_format(self):
        """
        Get the date_time_format of this Dialect.

        The format for timestamps in results. Default is [`RFC3339` date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp). To include nanoseconds in timestamps, use `RFC3339Nano`.  #### Example formatted date/time values  | Format      | Value                       | |:------------|:----------------------------| | `RFC3339`    | `"2006-01-02T15:04:05Z07:00"` | | `RFC3339Nano` | `"2006-01-02T15:04:05.999999999Z07:00"` |

        :return: The date_time_format of this Dialect.
        :rtype: str
        """
        ...
    @date_time_format.setter
    def date_time_format(self, date_time_format) -> None:
        """
        Get the date_time_format of this Dialect.

        The format for timestamps in results. Default is [`RFC3339` date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp). To include nanoseconds in timestamps, use `RFC3339Nano`.  #### Example formatted date/time values  | Format      | Value                       | |:------------|:----------------------------| | `RFC3339`    | `"2006-01-02T15:04:05Z07:00"` | | `RFC3339Nano` | `"2006-01-02T15:04:05.999999999Z07:00"` |

        :return: The date_time_format of this Dialect.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
