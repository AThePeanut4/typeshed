"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class Query:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        extern: Incomplete | None = None,
        query: Incomplete | None = None,
        type: Incomplete | None = None,
        params: Incomplete | None = None,
        dialect: Incomplete | None = None,
        now: Incomplete | None = None,
    ) -> None:
        """Query - a model defined in OpenAPI."""
        ...
    @property
    def extern(self):
        """
        Get the extern of this Query.

        :return: The extern of this Query.
        :rtype: File
        """
        ...
    @extern.setter
    def extern(self, extern) -> None:
        """
        Get the extern of this Query.

        :return: The extern of this Query.
        :rtype: File
        """
        ...
    @property
    def query(self):
        """
        Get the query of this Query.

        The query script to execute.

        :return: The query of this Query.
        :rtype: str
        """
        ...
    @query.setter
    def query(self, query) -> None:
        """
        Get the query of this Query.

        The query script to execute.

        :return: The query of this Query.
        :rtype: str
        """
        ...
    @property
    def type(self):
        """
        Get the type of this Query.

        The type of query. Must be "flux".

        :return: The type of this Query.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this Query.

        The type of query. Must be "flux".

        :return: The type of this Query.
        :rtype: str
        """
        ...
    @property
    def params(self):
        r"""
        Get the params of this Query.

        Key-value pairs passed as parameters during query execution.  To use parameters in your query, pass a _`query`_ with `params` references (in dot notation)--for example:  ```json   query: "from(bucket: params.mybucket)\\               |> range(start: params.rangeStart) |> limit(n:1)" ```  and pass _`params`_ with the key-value pairs--for example:  ```json   params: {     "mybucket": "environment",     "rangeStart": "-30d"   } ```  During query execution, InfluxDB passes _`params`_ to your script and substitutes the values.  #### Limitations  - If you use _`params`_, you can't use _`extern`_.

        :return: The params of this Query.
        :rtype: dict(str, object)
        """
        ...
    @params.setter
    def params(self, params) -> None:
        r"""
        Get the params of this Query.

        Key-value pairs passed as parameters during query execution.  To use parameters in your query, pass a _`query`_ with `params` references (in dot notation)--for example:  ```json   query: "from(bucket: params.mybucket)\\               |> range(start: params.rangeStart) |> limit(n:1)" ```  and pass _`params`_ with the key-value pairs--for example:  ```json   params: {     "mybucket": "environment",     "rangeStart": "-30d"   } ```  During query execution, InfluxDB passes _`params`_ to your script and substitutes the values.  #### Limitations  - If you use _`params`_, you can't use _`extern`_.

        :return: The params of this Query.
        :rtype: dict(str, object)
        """
        ...
    @property
    def dialect(self):
        """
        Get the dialect of this Query.

        :return: The dialect of this Query.
        :rtype: Dialect
        """
        ...
    @dialect.setter
    def dialect(self, dialect) -> None:
        """
        Get the dialect of this Query.

        :return: The dialect of this Query.
        :rtype: Dialect
        """
        ...
    @property
    def now(self):
        """
        Get the now of this Query.

        Specifies the time that should be reported as `now` in the query. Default is the server `now` time.

        :return: The now of this Query.
        :rtype: datetime
        """
        ...
    @now.setter
    def now(self, now) -> None:
        """
        Get the now of this Query.

        Specifies the time that should be reported as `now` in the query. Default is the server `now` time.

        :return: The now of this Query.
        :rtype: datetime
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
