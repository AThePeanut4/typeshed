"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class TemplateSummarySummary:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        buckets: Incomplete | None = None,
        checks: Incomplete | None = None,
        dashboards: Incomplete | None = None,
        labels: Incomplete | None = None,
        label_mappings: Incomplete | None = None,
        missing_env_refs: Incomplete | None = None,
        missing_secrets: Incomplete | None = None,
        notification_endpoints: Incomplete | None = None,
        notification_rules: Incomplete | None = None,
        tasks: Incomplete | None = None,
        telegraf_configs: Incomplete | None = None,
        variables: Incomplete | None = None,
    ) -> None:
        """TemplateSummarySummary - a model defined in OpenAPI."""
        ...
    @property
    def buckets(self):
        """
        Get the buckets of this TemplateSummarySummary.

        :return: The buckets of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryBuckets]
        """
        ...
    @buckets.setter
    def buckets(self, buckets) -> None:
        """
        Get the buckets of this TemplateSummarySummary.

        :return: The buckets of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryBuckets]
        """
        ...
    @property
    def checks(self):
        """
        Get the checks of this TemplateSummarySummary.

        :return: The checks of this TemplateSummarySummary.
        :rtype: list[CheckDiscriminator]
        """
        ...
    @checks.setter
    def checks(self, checks) -> None:
        """
        Get the checks of this TemplateSummarySummary.

        :return: The checks of this TemplateSummarySummary.
        :rtype: list[CheckDiscriminator]
        """
        ...
    @property
    def dashboards(self):
        """
        Get the dashboards of this TemplateSummarySummary.

        :return: The dashboards of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryDashboards]
        """
        ...
    @dashboards.setter
    def dashboards(self, dashboards) -> None:
        """
        Get the dashboards of this TemplateSummarySummary.

        :return: The dashboards of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryDashboards]
        """
        ...
    @property
    def labels(self):
        """
        Get the labels of this TemplateSummarySummary.

        :return: The labels of this TemplateSummarySummary.
        :rtype: list[TemplateSummaryLabel]
        """
        ...
    @labels.setter
    def labels(self, labels) -> None:
        """
        Get the labels of this TemplateSummarySummary.

        :return: The labels of this TemplateSummarySummary.
        :rtype: list[TemplateSummaryLabel]
        """
        ...
    @property
    def label_mappings(self):
        """
        Get the label_mappings of this TemplateSummarySummary.

        :return: The label_mappings of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryLabelMappings]
        """
        ...
    @label_mappings.setter
    def label_mappings(self, label_mappings) -> None:
        """
        Get the label_mappings of this TemplateSummarySummary.

        :return: The label_mappings of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryLabelMappings]
        """
        ...
    @property
    def missing_env_refs(self):
        """
        Get the missing_env_refs of this TemplateSummarySummary.

        :return: The missing_env_refs of this TemplateSummarySummary.
        :rtype: list[str]
        """
        ...
    @missing_env_refs.setter
    def missing_env_refs(self, missing_env_refs) -> None:
        """
        Get the missing_env_refs of this TemplateSummarySummary.

        :return: The missing_env_refs of this TemplateSummarySummary.
        :rtype: list[str]
        """
        ...
    @property
    def missing_secrets(self):
        """
        Get the missing_secrets of this TemplateSummarySummary.

        :return: The missing_secrets of this TemplateSummarySummary.
        :rtype: list[str]
        """
        ...
    @missing_secrets.setter
    def missing_secrets(self, missing_secrets) -> None:
        """
        Get the missing_secrets of this TemplateSummarySummary.

        :return: The missing_secrets of this TemplateSummarySummary.
        :rtype: list[str]
        """
        ...
    @property
    def notification_endpoints(self):
        """
        Get the notification_endpoints of this TemplateSummarySummary.

        :return: The notification_endpoints of this TemplateSummarySummary.
        :rtype: list[NotificationEndpointDiscriminator]
        """
        ...
    @notification_endpoints.setter
    def notification_endpoints(self, notification_endpoints) -> None:
        """
        Get the notification_endpoints of this TemplateSummarySummary.

        :return: The notification_endpoints of this TemplateSummarySummary.
        :rtype: list[NotificationEndpointDiscriminator]
        """
        ...
    @property
    def notification_rules(self):
        """
        Get the notification_rules of this TemplateSummarySummary.

        :return: The notification_rules of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryNotificationRules]
        """
        ...
    @notification_rules.setter
    def notification_rules(self, notification_rules) -> None:
        """
        Get the notification_rules of this TemplateSummarySummary.

        :return: The notification_rules of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryNotificationRules]
        """
        ...
    @property
    def tasks(self):
        """
        Get the tasks of this TemplateSummarySummary.

        :return: The tasks of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryTasks]
        """
        ...
    @tasks.setter
    def tasks(self, tasks) -> None:
        """
        Get the tasks of this TemplateSummarySummary.

        :return: The tasks of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryTasks]
        """
        ...
    @property
    def telegraf_configs(self):
        """
        Get the telegraf_configs of this TemplateSummarySummary.

        :return: The telegraf_configs of this TemplateSummarySummary.
        :rtype: list[TelegrafRequest]
        """
        ...
    @telegraf_configs.setter
    def telegraf_configs(self, telegraf_configs) -> None:
        """
        Get the telegraf_configs of this TemplateSummarySummary.

        :return: The telegraf_configs of this TemplateSummarySummary.
        :rtype: list[TelegrafRequest]
        """
        ...
    @property
    def variables(self):
        """
        Get the variables of this TemplateSummarySummary.

        :return: The variables of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryVariables]
        """
        ...
    @variables.setter
    def variables(self, variables) -> None:
        """
        Get the variables of this TemplateSummarySummary.

        :return: The variables of this TemplateSummarySummary.
        :rtype: list[TemplateSummarySummaryVariables]
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
