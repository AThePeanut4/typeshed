"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class TemplateApply:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        dry_run: Incomplete | None = None,
        org_id: Incomplete | None = None,
        stack_id: Incomplete | None = None,
        template: Incomplete | None = None,
        templates: Incomplete | None = None,
        env_refs: Incomplete | None = None,
        secrets: Incomplete | None = None,
        remotes: Incomplete | None = None,
        actions: Incomplete | None = None,
    ) -> None:
        """TemplateApply - a model defined in OpenAPI."""
        ...
    @property
    def dry_run(self):
        """
        Get the dry_run of this TemplateApply.

        Only applies a dry run of the templates passed in the request.  - Validates the template and generates a resource diff and summary. - Doesn't install templates or make changes to the InfluxDB instance.

        :return: The dry_run of this TemplateApply.
        :rtype: bool
        """
        ...
    @dry_run.setter
    def dry_run(self, dry_run) -> None:
        """
        Get the dry_run of this TemplateApply.

        Only applies a dry run of the templates passed in the request.  - Validates the template and generates a resource diff and summary. - Doesn't install templates or make changes to the InfluxDB instance.

        :return: The dry_run of this TemplateApply.
        :rtype: bool
        """
        ...
    @property
    def org_id(self):
        """
        Get the org_id of this TemplateApply.

        Organization ID. InfluxDB applies templates to this organization. The organization owns all resources created by the template.  To find your organization, see how to [view organizations](https://docs.influxdata.com/influxdb/latest/organizations/view-orgs/).

        :return: The org_id of this TemplateApply.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id) -> None:
        """
        Get the org_id of this TemplateApply.

        Organization ID. InfluxDB applies templates to this organization. The organization owns all resources created by the template.  To find your organization, see how to [view organizations](https://docs.influxdata.com/influxdb/latest/organizations/view-orgs/).

        :return: The org_id of this TemplateApply.
        :rtype: str
        """
        ...
    @property
    def stack_id(self):
        """
        Get the stack_id of this TemplateApply.

        ID of the stack to update.  To apply templates to an existing stack in the organization, use the `stackID` parameter. If you apply templates without providing a stack ID, InfluxDB initializes a new stack with all new resources.  To find a stack ID, use the InfluxDB [`/api/v2/stacks` API endpoint](#operation/ListStacks) to list stacks.  #### Related guides  - [Stacks](https://docs.influxdata.com/influxdb/latest/influxdb-templates/stacks/) - [View stacks](https://docs.influxdata.com/influxdb/latest/influxdb-templates/stacks/view/)

        :return: The stack_id of this TemplateApply.
        :rtype: str
        """
        ...
    @stack_id.setter
    def stack_id(self, stack_id) -> None:
        """
        Get the stack_id of this TemplateApply.

        ID of the stack to update.  To apply templates to an existing stack in the organization, use the `stackID` parameter. If you apply templates without providing a stack ID, InfluxDB initializes a new stack with all new resources.  To find a stack ID, use the InfluxDB [`/api/v2/stacks` API endpoint](#operation/ListStacks) to list stacks.  #### Related guides  - [Stacks](https://docs.influxdata.com/influxdb/latest/influxdb-templates/stacks/) - [View stacks](https://docs.influxdata.com/influxdb/latest/influxdb-templates/stacks/view/)

        :return: The stack_id of this TemplateApply.
        :rtype: str
        """
        ...
    @property
    def template(self):
        """
        Get the template of this TemplateApply.

        :return: The template of this TemplateApply.
        :rtype: TemplateApplyTemplate
        """
        ...
    @template.setter
    def template(self, template) -> None:
        """
        Get the template of this TemplateApply.

        :return: The template of this TemplateApply.
        :rtype: TemplateApplyTemplate
        """
        ...
    @property
    def templates(self):
        """
        Get the templates of this TemplateApply.

        A list of template objects to apply. A template object has a `contents` property with an array of InfluxDB resource configurations.  Use the `templates` parameter to apply multiple template objects. If you use `templates`, you can't use the `template` parameter.

        :return: The templates of this TemplateApply.
        :rtype: list[TemplateApplyTemplate]
        """
        ...
    @templates.setter
    def templates(self, templates) -> None:
        """
        Get the templates of this TemplateApply.

        A list of template objects to apply. A template object has a `contents` property with an array of InfluxDB resource configurations.  Use the `templates` parameter to apply multiple template objects. If you use `templates`, you can't use the `template` parameter.

        :return: The templates of this TemplateApply.
        :rtype: list[TemplateApplyTemplate]
        """
        ...
    @property
    def env_refs(self):
        """
        Get the env_refs of this TemplateApply.

        An object with key-value pairs that map to **environment references** in templates.  Environment references in templates are `envRef` objects with an `envRef.key` property. To substitute a custom environment reference value when applying templates, pass `envRefs` with the `envRef.key` and the value.  When you apply a template, InfluxDB replaces `envRef` objects in the template with the values that you provide in the `envRefs` parameter. For more examples, see how to [define environment references](https://docs.influxdata.com/influxdb/latest/influxdb-templates/use/#define-environment-references).  The following template fields may use environment references:    - `metadata.name`   - `spec.endpointName`   - `spec.associations.name`  For more information about including environment references in template fields, see how to [include user-definable resource names](https://docs.influxdata.com/influxdb/latest/influxdb-templates/create/#include-user-definable-resource-names).

        :return: The env_refs of this TemplateApply.
        :rtype: dict(str, object)
        """
        ...
    @env_refs.setter
    def env_refs(self, env_refs) -> None:
        """
        Get the env_refs of this TemplateApply.

        An object with key-value pairs that map to **environment references** in templates.  Environment references in templates are `envRef` objects with an `envRef.key` property. To substitute a custom environment reference value when applying templates, pass `envRefs` with the `envRef.key` and the value.  When you apply a template, InfluxDB replaces `envRef` objects in the template with the values that you provide in the `envRefs` parameter. For more examples, see how to [define environment references](https://docs.influxdata.com/influxdb/latest/influxdb-templates/use/#define-environment-references).  The following template fields may use environment references:    - `metadata.name`   - `spec.endpointName`   - `spec.associations.name`  For more information about including environment references in template fields, see how to [include user-definable resource names](https://docs.influxdata.com/influxdb/latest/influxdb-templates/create/#include-user-definable-resource-names).

        :return: The env_refs of this TemplateApply.
        :rtype: dict(str, object)
        """
        ...
    @property
    def secrets(self):
        """
        Get the secrets of this TemplateApply.

        An object with key-value pairs that map to **secrets** in queries.  Queries may reference secrets stored in InfluxDB--for example, the following Flux script retrieves `POSTGRES_USERNAME` and `POSTGRES_PASSWORD` secrets and then uses them to connect to a PostgreSQL database:  ```js import "sql" import "influxdata/influxdb/secrets"  username = secrets.get(key: "POSTGRES_USERNAME") password = secrets.get(key: "POSTGRES_PASSWORD")  sql.from(   driverName: "postgres",   dataSourceName: "postgresql://${username}:${password}@localhost:5432",   query: "SELECT * FROM example_table", ) ```  To define secret values in your `/api/v2/templates/apply` request, pass the `secrets` parameter with key-value pairs--for example:  ```json {   ...   "secrets": {     "POSTGRES_USERNAME": "pguser",     "POSTGRES_PASSWORD": "foo"   }   ... } ```  InfluxDB stores the key-value pairs as secrets that you can access with `secrets.get()`. Once stored, you can't view secret values in InfluxDB.  #### Related guides  - [How to pass secrets when installing a template](https://docs.influxdata.com/influxdb/latest/influxdb-templates/use/#pass-secrets-when-installing-a-template)

        :return: The secrets of this TemplateApply.
        :rtype: dict(str, str)
        """
        ...
    @secrets.setter
    def secrets(self, secrets) -> None:
        """
        Get the secrets of this TemplateApply.

        An object with key-value pairs that map to **secrets** in queries.  Queries may reference secrets stored in InfluxDB--for example, the following Flux script retrieves `POSTGRES_USERNAME` and `POSTGRES_PASSWORD` secrets and then uses them to connect to a PostgreSQL database:  ```js import "sql" import "influxdata/influxdb/secrets"  username = secrets.get(key: "POSTGRES_USERNAME") password = secrets.get(key: "POSTGRES_PASSWORD")  sql.from(   driverName: "postgres",   dataSourceName: "postgresql://${username}:${password}@localhost:5432",   query: "SELECT * FROM example_table", ) ```  To define secret values in your `/api/v2/templates/apply` request, pass the `secrets` parameter with key-value pairs--for example:  ```json {   ...   "secrets": {     "POSTGRES_USERNAME": "pguser",     "POSTGRES_PASSWORD": "foo"   }   ... } ```  InfluxDB stores the key-value pairs as secrets that you can access with `secrets.get()`. Once stored, you can't view secret values in InfluxDB.  #### Related guides  - [How to pass secrets when installing a template](https://docs.influxdata.com/influxdb/latest/influxdb-templates/use/#pass-secrets-when-installing-a-template)

        :return: The secrets of this TemplateApply.
        :rtype: dict(str, str)
        """
        ...
    @property
    def remotes(self):
        """
        Get the remotes of this TemplateApply.

        A list of URLs for template files.  To apply a template manifest file located at a URL, pass `remotes` with an array that contains the URL.

        :return: The remotes of this TemplateApply.
        :rtype: list[TemplateApplyRemotes]
        """
        ...
    @remotes.setter
    def remotes(self, remotes) -> None:
        """
        Get the remotes of this TemplateApply.

        A list of URLs for template files.  To apply a template manifest file located at a URL, pass `remotes` with an array that contains the URL.

        :return: The remotes of this TemplateApply.
        :rtype: list[TemplateApplyRemotes]
        """
        ...
    @property
    def actions(self):
        """
        Get the actions of this TemplateApply.

        A list of `action` objects. Actions let you customize how InfluxDB applies templates in the request.  You can use the following actions to prevent creating or updating resources:  - A `skipKind` action skips template resources of a specified `kind`. - A `skipResource` action skips template resources with a specified `metadata.name`   and `kind`.

        :return: The actions of this TemplateApply.
        :rtype: list[object]
        """
        ...
    @actions.setter
    def actions(self, actions) -> None:
        """
        Get the actions of this TemplateApply.

        A list of `action` objects. Actions let you customize how InfluxDB applies templates in the request.  You can use the following actions to prevent creating or updating resources:  - A `skipKind` action skips template resources of a specified `kind`. - A `skipResource` action skips template resources with a specified `metadata.name`   and `kind`.

        :return: The actions of this TemplateApply.
        :rtype: list[object]
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
