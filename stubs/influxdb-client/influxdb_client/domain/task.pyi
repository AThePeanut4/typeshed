"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class Task:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        id: str | None = None,
        org_id: str | None = None,
        org: Incomplete | None = None,
        name: Incomplete | None = None,
        owner_id: Incomplete | None = None,
        description: Incomplete | None = None,
        status: Incomplete | None = None,
        labels: Incomplete | None = None,
        authorization_id: Incomplete | None = None,
        flux: Incomplete | None = None,
        every: Incomplete | None = None,
        cron: Incomplete | None = None,
        offset: Incomplete | None = None,
        latest_completed: Incomplete | None = None,
        last_run_status: Incomplete | None = None,
        last_run_error: Incomplete | None = None,
        created_at: Incomplete | None = None,
        updated_at: Incomplete | None = None,
        links: Incomplete | None = None,
    ) -> None:
        """Task - a model defined in OpenAPI."""
        ...
    @property
    def id(self) -> str | None:
        """
        Get the id of this Task.

        :return: The id of this Task.
        :rtype: str
        """
        ...
    @id.setter
    def id(self, id: str) -> None:
        """
        Get the id of this Task.

        :return: The id of this Task.
        :rtype: str
        """
        ...
    @property
    def org_id(self) -> str | None:
        """
        Get the org_id of this Task.

        An [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) ID. Specifies the organization that owns the task.

        :return: The org_id of this Task.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id: str) -> None:
        """
        Get the org_id of this Task.

        An [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) ID. Specifies the organization that owns the task.

        :return: The org_id of this Task.
        :rtype: str
        """
        ...
    @property
    def org(self):
        """
        Get the org of this Task.

        An [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) name. Specifies the organization that owns the task.

        :return: The org of this Task.
        :rtype: str
        """
        ...
    @org.setter
    def org(self, org) -> None:
        """
        Get the org of this Task.

        An [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) name. Specifies the organization that owns the task.

        :return: The org of this Task.
        :rtype: str
        """
        ...
    @property
    def name(self):
        """
        Get the name of this Task.

        The name of the task.

        :return: The name of this Task.
        :rtype: str
        """
        ...
    @name.setter
    def name(self, name) -> None:
        """
        Get the name of this Task.

        The name of the task.

        :return: The name of this Task.
        :rtype: str
        """
        ...
    @property
    def owner_id(self):
        """
        Get the owner_id of this Task.

        A [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) ID. Specifies the owner of the task.  To find a user ID, you can use the [`GET /api/v2/users` endpoint](#operation/GetUsers) to list users.

        :return: The owner_id of this Task.
        :rtype: str
        """
        ...
    @owner_id.setter
    def owner_id(self, owner_id) -> None:
        """
        Get the owner_id of this Task.

        A [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) ID. Specifies the owner of the task.  To find a user ID, you can use the [`GET /api/v2/users` endpoint](#operation/GetUsers) to list users.

        :return: The owner_id of this Task.
        :rtype: str
        """
        ...
    @property
    def description(self):
        """
        Get the description of this Task.

        A description of the task.

        :return: The description of this Task.
        :rtype: str
        """
        ...
    @description.setter
    def description(self, description) -> None:
        """
        Get the description of this Task.

        A description of the task.

        :return: The description of this Task.
        :rtype: str
        """
        ...
    @property
    def status(self):
        """
        Get the status of this Task.

        :return: The status of this Task.
        :rtype: TaskStatusType
        """
        ...
    @status.setter
    def status(self, status) -> None:
        """
        Get the status of this Task.

        :return: The status of this Task.
        :rtype: TaskStatusType
        """
        ...
    @property
    def labels(self):
        """
        Get the labels of this Task.

        :return: The labels of this Task.
        :rtype: list[Label]
        """
        ...
    @labels.setter
    def labels(self, labels) -> None:
        """
        Get the labels of this Task.

        :return: The labels of this Task.
        :rtype: list[Label]
        """
        ...
    @property
    def authorization_id(self):
        """
        Get the authorization_id of this Task.

        An authorization ID. Specifies the authorization used when the task communicates with the query engine.  To find an authorization ID, use the [`GET /api/v2/authorizations` endpoint](#operation/GetAuthorizations) to list authorizations.

        :return: The authorization_id of this Task.
        :rtype: str
        """
        ...
    @authorization_id.setter
    def authorization_id(self, authorization_id) -> None:
        """
        Get the authorization_id of this Task.

        An authorization ID. Specifies the authorization used when the task communicates with the query engine.  To find an authorization ID, use the [`GET /api/v2/authorizations` endpoint](#operation/GetAuthorizations) to list authorizations.

        :return: The authorization_id of this Task.
        :rtype: str
        """
        ...
    @property
    def flux(self):
        """
        Get the flux of this Task.

        The Flux script that the task executes.

        :return: The flux of this Task.
        :rtype: str
        """
        ...
    @flux.setter
    def flux(self, flux) -> None:
        """
        Get the flux of this Task.

        The Flux script that the task executes.

        :return: The flux of this Task.
        :rtype: str
        """
        ...
    @property
    def every(self):
        """
        Get the every of this Task.

        The interval ([duration literal](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) at which the task runs. `every` also determines when the task first runs, depending on the specified time.

        :return: The every of this Task.
        :rtype: str
        """
        ...
    @every.setter
    def every(self, every) -> None:
        """
        Get the every of this Task.

        The interval ([duration literal](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) at which the task runs. `every` also determines when the task first runs, depending on the specified time.

        :return: The every of this Task.
        :rtype: str
        """
        ...
    @property
    def cron(self):
        """
        Get the cron of this Task.

        A [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.

        :return: The cron of this Task.
        :rtype: str
        """
        ...
    @cron.setter
    def cron(self, cron) -> None:
        """
        Get the cron of this Task.

        A [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.

        :return: The cron of this Task.
        :rtype: str
        """
        ...
    @property
    def offset(self):
        """
        Get the offset of this Task.

        A [duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.

        :return: The offset of this Task.
        :rtype: str
        """
        ...
    @offset.setter
    def offset(self, offset) -> None:
        """
        Get the offset of this Task.

        A [duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.

        :return: The offset of this Task.
        :rtype: str
        """
        ...
    @property
    def latest_completed(self):
        """
        Get the latest_completed of this Task.

        A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.

        :return: The latest_completed of this Task.
        :rtype: datetime
        """
        ...
    @latest_completed.setter
    def latest_completed(self, latest_completed) -> None:
        """
        Get the latest_completed of this Task.

        A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/latest/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.

        :return: The latest_completed of this Task.
        :rtype: datetime
        """
        ...
    @property
    def last_run_status(self):
        """
        Get the last_run_status of this Task.

        :return: The last_run_status of this Task.
        :rtype: str
        """
        ...
    @last_run_status.setter
    def last_run_status(self, last_run_status) -> None:
        """
        Get the last_run_status of this Task.

        :return: The last_run_status of this Task.
        :rtype: str
        """
        ...
    @property
    def last_run_error(self):
        """
        Get the last_run_error of this Task.

        :return: The last_run_error of this Task.
        :rtype: str
        """
        ...
    @last_run_error.setter
    def last_run_error(self, last_run_error) -> None:
        """
        Get the last_run_error of this Task.

        :return: The last_run_error of this Task.
        :rtype: str
        """
        ...
    @property
    def created_at(self):
        """
        Get the created_at of this Task.

        :return: The created_at of this Task.
        :rtype: datetime
        """
        ...
    @created_at.setter
    def created_at(self, created_at) -> None:
        """
        Get the created_at of this Task.

        :return: The created_at of this Task.
        :rtype: datetime
        """
        ...
    @property
    def updated_at(self):
        """
        Get the updated_at of this Task.

        :return: The updated_at of this Task.
        :rtype: datetime
        """
        ...
    @updated_at.setter
    def updated_at(self, updated_at) -> None:
        """
        Get the updated_at of this Task.

        :return: The updated_at of this Task.
        :rtype: datetime
        """
        ...
    @property
    def links(self):
        """
        Get the links of this Task.

        :return: The links of this Task.
        :rtype: TaskLinks
        """
        ...
    @links.setter
    def links(self, links) -> None:
        """
        Get the links of this Task.

        :return: The links of this Task.
        :rtype: TaskLinks
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
