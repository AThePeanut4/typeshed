"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class RoutesQuery:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        _self: Incomplete | None = None,
        ast: Incomplete | None = None,
        analyze: Incomplete | None = None,
        suggestions: Incomplete | None = None,
    ) -> None:
        """RoutesQuery - a model defined in OpenAPI."""
        ...
    @property
    def ast(self):
        """
        Get the ast of this RoutesQuery.

        :return: The ast of this RoutesQuery.
        :rtype: str
        """
        ...
    @ast.setter
    def ast(self, ast) -> None:
        """
        Get the ast of this RoutesQuery.

        :return: The ast of this RoutesQuery.
        :rtype: str
        """
        ...
    @property
    def analyze(self):
        """
        Get the analyze of this RoutesQuery.

        :return: The analyze of this RoutesQuery.
        :rtype: str
        """
        ...
    @analyze.setter
    def analyze(self, analyze) -> None:
        """
        Get the analyze of this RoutesQuery.

        :return: The analyze of this RoutesQuery.
        :rtype: str
        """
        ...
    @property
    def suggestions(self):
        """
        Get the suggestions of this RoutesQuery.

        :return: The suggestions of this RoutesQuery.
        :rtype: str
        """
        ...
    @suggestions.setter
    def suggestions(self, suggestions) -> None:
        """
        Get the suggestions of this RoutesQuery.

        :return: The suggestions of this RoutesQuery.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
