"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class StatusRule:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        current_level: Incomplete | None = None,
        previous_level: Incomplete | None = None,
        count: Incomplete | None = None,
        period: Incomplete | None = None,
    ) -> None:
        """StatusRule - a model defined in OpenAPI."""
        ...
    @property
    def current_level(self):
        """
        Get the current_level of this StatusRule.

        :return: The current_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        ...
    @current_level.setter
    def current_level(self, current_level) -> None:
        """
        Get the current_level of this StatusRule.

        :return: The current_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        ...
    @property
    def previous_level(self):
        """
        Get the previous_level of this StatusRule.

        :return: The previous_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        ...
    @previous_level.setter
    def previous_level(self, previous_level) -> None:
        """
        Get the previous_level of this StatusRule.

        :return: The previous_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        ...
    @property
    def count(self):
        """
        Get the count of this StatusRule.

        :return: The count of this StatusRule.
        :rtype: int
        """
        ...
    @count.setter
    def count(self, count) -> None:
        """
        Get the count of this StatusRule.

        :return: The count of this StatusRule.
        :rtype: int
        """
        ...
    @property
    def period(self):
        """
        Get the period of this StatusRule.

        :return: The period of this StatusRule.
        :rtype: str
        """
        ...
    @period.setter
    def period(self, period) -> None:
        """
        Get the period of this StatusRule.

        :return: The period of this StatusRule.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
