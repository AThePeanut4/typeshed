"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.authorization_update_request import AuthorizationUpdateRequest

class Authorization(AuthorizationUpdateRequest):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        created_at: Incomplete | None = None,
        updated_at: Incomplete | None = None,
        org_id: Incomplete | None = None,
        permissions: Incomplete | None = None,
        id: Incomplete | None = None,
        token: Incomplete | None = None,
        user_id: Incomplete | None = None,
        user: Incomplete | None = None,
        org: Incomplete | None = None,
        links: Incomplete | None = None,
        status: str = "active",
        description: Incomplete | None = None,
    ) -> None:
        """Authorization - a model defined in OpenAPI."""
        ...
    @property
    def created_at(self):
        """
        Get the created_at of this Authorization.

        :return: The created_at of this Authorization.
        :rtype: datetime
        """
        ...
    @created_at.setter
    def created_at(self, created_at) -> None:
        """
        Get the created_at of this Authorization.

        :return: The created_at of this Authorization.
        :rtype: datetime
        """
        ...
    @property
    def updated_at(self):
        """
        Get the updated_at of this Authorization.

        :return: The updated_at of this Authorization.
        :rtype: datetime
        """
        ...
    @updated_at.setter
    def updated_at(self, updated_at) -> None:
        """
        Get the updated_at of this Authorization.

        :return: The updated_at of this Authorization.
        :rtype: datetime
        """
        ...
    @property
    def org_id(self):
        """
        Get the org_id of this Authorization.

        The organization ID. Specifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that the authorization is scoped to.

        :return: The org_id of this Authorization.
        :rtype: str
        """
        ...
    @org_id.setter
    def org_id(self, org_id) -> None:
        """
        Get the org_id of this Authorization.

        The organization ID. Specifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that the authorization is scoped to.

        :return: The org_id of this Authorization.
        :rtype: str
        """
        ...
    @property
    def permissions(self):
        """
        Get the permissions of this Authorization.

        The list of permissions. An authorization must have at least one permission.

        :return: The permissions of this Authorization.
        :rtype: list[Permission]
        """
        ...
    @permissions.setter
    def permissions(self, permissions) -> None:
        """
        Get the permissions of this Authorization.

        The list of permissions. An authorization must have at least one permission.

        :return: The permissions of this Authorization.
        :rtype: list[Permission]
        """
        ...
    @property
    def id(self):
        """
        Get the id of this Authorization.

        The authorization ID.

        :return: The id of this Authorization.
        :rtype: str
        """
        ...
    @id.setter
    def id(self, id) -> None:
        """
        Get the id of this Authorization.

        The authorization ID.

        :return: The id of this Authorization.
        :rtype: str
        """
        ...
    @property
    def token(self):
        """
        Get the token of this Authorization.

        The API token. The token value is unique to the authorization. [API tokens](https://docs.influxdata.com/influxdb/latest/reference/glossary/#token) are used to authenticate and authorize InfluxDB API requests and `influx` CLI commands--after receiving the request, InfluxDB checks that the token is valid and that the `permissions` allow the requested action(s).

        :return: The token of this Authorization.
        :rtype: str
        """
        ...
    @token.setter
    def token(self, token) -> None:
        """
        Get the token of this Authorization.

        The API token. The token value is unique to the authorization. [API tokens](https://docs.influxdata.com/influxdb/latest/reference/glossary/#token) are used to authenticate and authorize InfluxDB API requests and `influx` CLI commands--after receiving the request, InfluxDB checks that the token is valid and that the `permissions` allow the requested action(s).

        :return: The token of this Authorization.
        :rtype: str
        """
        ...
    @property
    def user_id(self):
        """
        Get the user_id of this Authorization.

        The user ID. Specifies the [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.

        :return: The user_id of this Authorization.
        :rtype: str
        """
        ...
    @user_id.setter
    def user_id(self, user_id) -> None:
        """
        Get the user_id of this Authorization.

        The user ID. Specifies the [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.

        :return: The user_id of this Authorization.
        :rtype: str
        """
        ...
    @property
    def user(self):
        """
        Get the user of this Authorization.

        The user name. Specifies the [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) that owns the authorization. If the authorization is _scoped_ to a user, the user; otherwise, the creator of the authorization.

        :return: The user of this Authorization.
        :rtype: str
        """
        ...
    @user.setter
    def user(self, user) -> None:
        """
        Get the user of this Authorization.

        The user name. Specifies the [user](https://docs.influxdata.com/influxdb/latest/reference/glossary/#user) that owns the authorization. If the authorization is _scoped_ to a user, the user; otherwise, the creator of the authorization.

        :return: The user of this Authorization.
        :rtype: str
        """
        ...
    @property
    def org(self):
        """
        Get the org of this Authorization.

        The organization name. Specifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that the token is scoped to.

        :return: The org of this Authorization.
        :rtype: str
        """
        ...
    @org.setter
    def org(self, org) -> None:
        """
        Get the org of this Authorization.

        The organization name. Specifies the [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization) that the token is scoped to.

        :return: The org of this Authorization.
        :rtype: str
        """
        ...
    @property
    def links(self):
        """
        Get the links of this Authorization.

        :return: The links of this Authorization.
        :rtype: object
        """
        ...
    @links.setter
    def links(self, links) -> None:
        """
        Get the links of this Authorization.

        :return: The links of this Authorization.
        :rtype: object
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
