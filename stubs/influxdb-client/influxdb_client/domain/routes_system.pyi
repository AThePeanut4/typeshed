"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class RoutesSystem:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self, metrics: Incomplete | None = None, debug: Incomplete | None = None, health: Incomplete | None = None
    ) -> None:
        """RoutesSystem - a model defined in OpenAPI."""
        ...
    @property
    def metrics(self):
        """
        Get the metrics of this RoutesSystem.

        :return: The metrics of this RoutesSystem.
        :rtype: str
        """
        ...
    @metrics.setter
    def metrics(self, metrics) -> None:
        """
        Get the metrics of this RoutesSystem.

        :return: The metrics of this RoutesSystem.
        :rtype: str
        """
        ...
    @property
    def debug(self):
        """
        Get the debug of this RoutesSystem.

        :return: The debug of this RoutesSystem.
        :rtype: str
        """
        ...
    @debug.setter
    def debug(self, debug) -> None:
        """
        Get the debug of this RoutesSystem.

        :return: The debug of this RoutesSystem.
        :rtype: str
        """
        ...
    @property
    def health(self):
        """
        Get the health of this RoutesSystem.

        :return: The health of this RoutesSystem.
        :rtype: str
        """
        ...
    @health.setter
    def health(self, health) -> None:
        """
        Get the health of this RoutesSystem.

        :return: The health of this RoutesSystem.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
