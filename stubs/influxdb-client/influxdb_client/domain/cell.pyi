"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class Cell:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        id: Incomplete | None = None,
        links: Incomplete | None = None,
        x: Incomplete | None = None,
        y: Incomplete | None = None,
        w: Incomplete | None = None,
        h: Incomplete | None = None,
        view_id: Incomplete | None = None,
    ) -> None:
        """Cell - a model defined in OpenAPI."""
        ...
    @property
    def id(self):
        """
        Get the id of this Cell.

        :return: The id of this Cell.
        :rtype: str
        """
        ...
    @id.setter
    def id(self, id) -> None:
        """
        Get the id of this Cell.

        :return: The id of this Cell.
        :rtype: str
        """
        ...
    @property
    def links(self):
        """
        Get the links of this Cell.

        :return: The links of this Cell.
        :rtype: CellLinks
        """
        ...
    @links.setter
    def links(self, links) -> None:
        """
        Get the links of this Cell.

        :return: The links of this Cell.
        :rtype: CellLinks
        """
        ...
    @property
    def x(self):
        """
        Get the x of this Cell.

        :return: The x of this Cell.
        :rtype: int
        """
        ...
    @x.setter
    def x(self, x) -> None:
        """
        Get the x of this Cell.

        :return: The x of this Cell.
        :rtype: int
        """
        ...
    @property
    def y(self):
        """
        Get the y of this Cell.

        :return: The y of this Cell.
        :rtype: int
        """
        ...
    @y.setter
    def y(self, y) -> None:
        """
        Get the y of this Cell.

        :return: The y of this Cell.
        :rtype: int
        """
        ...
    @property
    def w(self):
        """
        Get the w of this Cell.

        :return: The w of this Cell.
        :rtype: int
        """
        ...
    @w.setter
    def w(self, w) -> None:
        """
        Get the w of this Cell.

        :return: The w of this Cell.
        :rtype: int
        """
        ...
    @property
    def h(self):
        """
        Get the h of this Cell.

        :return: The h of this Cell.
        :rtype: int
        """
        ...
    @h.setter
    def h(self, h) -> None:
        """
        Get the h of this Cell.

        :return: The h of this Cell.
        :rtype: int
        """
        ...
    @property
    def view_id(self):
        """
        Get the view_id of this Cell.

        The reference to a view from the views API.

        :return: The view_id of this Cell.
        :rtype: str
        """
        ...
    @view_id.setter
    def view_id(self, view_id) -> None:
        """
        Get the view_id of this Cell.

        The reference to a view from the views API.

        :return: The view_id of this Cell.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
