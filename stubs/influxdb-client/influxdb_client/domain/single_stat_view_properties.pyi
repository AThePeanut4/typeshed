"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.view_properties import ViewProperties

class SingleStatViewProperties(ViewProperties):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        type: Incomplete | None = None,
        queries: Incomplete | None = None,
        colors: Incomplete | None = None,
        shape: Incomplete | None = None,
        note: Incomplete | None = None,
        show_note_when_empty: Incomplete | None = None,
        prefix: Incomplete | None = None,
        tick_prefix: Incomplete | None = None,
        suffix: Incomplete | None = None,
        tick_suffix: Incomplete | None = None,
        static_legend: Incomplete | None = None,
        decimal_places: Incomplete | None = None,
    ) -> None:
        """SingleStatViewProperties - a model defined in OpenAPI."""
        ...
    @property
    def type(self):
        """
        Get the type of this SingleStatViewProperties.

        :return: The type of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this SingleStatViewProperties.

        :return: The type of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def queries(self):
        """
        Get the queries of this SingleStatViewProperties.

        :return: The queries of this SingleStatViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @queries.setter
    def queries(self, queries) -> None:
        """
        Get the queries of this SingleStatViewProperties.

        :return: The queries of this SingleStatViewProperties.
        :rtype: list[DashboardQuery]
        """
        ...
    @property
    def colors(self):
        """
        Get the colors of this SingleStatViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this SingleStatViewProperties.
        :rtype: list[DashboardColor]
        """
        ...
    @colors.setter
    def colors(self, colors) -> None:
        """
        Get the colors of this SingleStatViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this SingleStatViewProperties.
        :rtype: list[DashboardColor]
        """
        ...
    @property
    def shape(self):
        """
        Get the shape of this SingleStatViewProperties.

        :return: The shape of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @shape.setter
    def shape(self, shape) -> None:
        """
        Get the shape of this SingleStatViewProperties.

        :return: The shape of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def note(self):
        """
        Get the note of this SingleStatViewProperties.

        :return: The note of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @note.setter
    def note(self, note) -> None:
        """
        Get the note of this SingleStatViewProperties.

        :return: The note of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def show_note_when_empty(self):
        """
        Get the show_note_when_empty of this SingleStatViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this SingleStatViewProperties.
        :rtype: bool
        """
        ...
    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty) -> None:
        """
        Get the show_note_when_empty of this SingleStatViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this SingleStatViewProperties.
        :rtype: bool
        """
        ...
    @property
    def prefix(self):
        """
        Get the prefix of this SingleStatViewProperties.

        :return: The prefix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @prefix.setter
    def prefix(self, prefix) -> None:
        """
        Get the prefix of this SingleStatViewProperties.

        :return: The prefix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def tick_prefix(self):
        """
        Get the tick_prefix of this SingleStatViewProperties.

        :return: The tick_prefix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @tick_prefix.setter
    def tick_prefix(self, tick_prefix) -> None:
        """
        Get the tick_prefix of this SingleStatViewProperties.

        :return: The tick_prefix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def suffix(self):
        """
        Get the suffix of this SingleStatViewProperties.

        :return: The suffix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @suffix.setter
    def suffix(self, suffix) -> None:
        """
        Get the suffix of this SingleStatViewProperties.

        :return: The suffix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def tick_suffix(self):
        """
        Get the tick_suffix of this SingleStatViewProperties.

        :return: The tick_suffix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @tick_suffix.setter
    def tick_suffix(self, tick_suffix) -> None:
        """
        Get the tick_suffix of this SingleStatViewProperties.

        :return: The tick_suffix of this SingleStatViewProperties.
        :rtype: str
        """
        ...
    @property
    def static_legend(self):
        """
        Get the static_legend of this SingleStatViewProperties.

        :return: The static_legend of this SingleStatViewProperties.
        :rtype: StaticLegend
        """
        ...
    @static_legend.setter
    def static_legend(self, static_legend) -> None:
        """
        Get the static_legend of this SingleStatViewProperties.

        :return: The static_legend of this SingleStatViewProperties.
        :rtype: StaticLegend
        """
        ...
    @property
    def decimal_places(self):
        """
        Get the decimal_places of this SingleStatViewProperties.

        :return: The decimal_places of this SingleStatViewProperties.
        :rtype: DecimalPlaces
        """
        ...
    @decimal_places.setter
    def decimal_places(self, decimal_places) -> None:
        """
        Get the decimal_places of this SingleStatViewProperties.

        :return: The decimal_places of this SingleStatViewProperties.
        :rtype: DecimalPlaces
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
