"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class LineProtocolLengthError:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(self, code: Incomplete | None = None, message: Incomplete | None = None) -> None:
        """LineProtocolLengthError - a model defined in OpenAPI."""
        ...
    @property
    def code(self):
        """
        Get the code of this LineProtocolLengthError.

        Code is the machine-readable error code.

        :return: The code of this LineProtocolLengthError.
        :rtype: str
        """
        ...
    @code.setter
    def code(self, code) -> None:
        """
        Get the code of this LineProtocolLengthError.

        Code is the machine-readable error code.

        :return: The code of this LineProtocolLengthError.
        :rtype: str
        """
        ...
    @property
    def message(self):
        """
        Get the message of this LineProtocolLengthError.

        Human-readable message.

        :return: The message of this LineProtocolLengthError.
        :rtype: str
        """
        ...
    @message.setter
    def message(self, message) -> None:
        """
        Get the message of this LineProtocolLengthError.

        Human-readable message.

        :return: The message of this LineProtocolLengthError.
        :rtype: str
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
