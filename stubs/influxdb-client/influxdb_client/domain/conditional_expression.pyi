"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.domain.expression import Expression

class ConditionalExpression(Expression):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        type: Incomplete | None = None,
        test: Incomplete | None = None,
        alternate: Incomplete | None = None,
        consequent: Incomplete | None = None,
    ) -> None:
        """ConditionalExpression - a model defined in OpenAPI."""
        ...
    @property
    def type(self):
        """
        Get the type of this ConditionalExpression.

        Type of AST node

        :return: The type of this ConditionalExpression.
        :rtype: str
        """
        ...
    @type.setter
    def type(self, type) -> None:
        """
        Get the type of this ConditionalExpression.

        Type of AST node

        :return: The type of this ConditionalExpression.
        :rtype: str
        """
        ...
    @property
    def test(self):
        """
        Get the test of this ConditionalExpression.

        :return: The test of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    @test.setter
    def test(self, test) -> None:
        """
        Get the test of this ConditionalExpression.

        :return: The test of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    @property
    def alternate(self):
        """
        Get the alternate of this ConditionalExpression.

        :return: The alternate of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    @alternate.setter
    def alternate(self, alternate) -> None:
        """
        Get the alternate of this ConditionalExpression.

        :return: The alternate of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    @property
    def consequent(self):
        """
        Get the consequent of this ConditionalExpression.

        :return: The consequent of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    @consequent.setter
    def consequent(self, consequent) -> None:
        """
        Get the consequent of this ConditionalExpression.

        :return: The consequent of this ConditionalExpression.
        :rtype: Expression
        """
        ...
    def to_dict(self):
        """Return the model properties as a dict."""
        ...
    def to_str(self):
        """Return the string representation of the model."""
        ...
    def __eq__(self, other):
        """Return true if both objects are equal."""
        ...
    def __ne__(self, other):
        """Return true if both objects are not equal."""
        ...
