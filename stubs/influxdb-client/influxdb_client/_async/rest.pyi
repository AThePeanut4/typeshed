"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

import io
from _typeshed import Incomplete

class RESTResponseAsync(io.IOBase):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    aiohttp_response: Incomplete
    status: Incomplete
    reason: Incomplete
    data: Incomplete
    def __init__(self, resp, data) -> None:
        """Initialize with HTTP response."""
        ...
    def getheaders(self):
        """Return a CIMultiDictProxy of the response headers."""
        ...
    def getheader(self, name, default: Incomplete | None = None):
        """Return a given response header."""
        ...

class RESTClientObjectAsync:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    proxy: Incomplete
    proxy_headers: Incomplete
    allow_redirects: Incomplete
    max_redirects: Incomplete
    pool_manager: Incomplete
    def __init__(self, configuration, pools_size: int = 4, maxsize: Incomplete | None = None, **kwargs) -> None:
        """Initialize REST client."""
        ...
    async def close(self) -> None:
        """Dispose connection pool manager."""
        ...
    async def request(
        self,
        method,
        url,
        query_params: Incomplete | None = None,
        headers: Incomplete | None = None,
        body: Incomplete | None = None,
        post_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """
        Execute request.

        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param _preload_content: this is a non-applicable field for
                                 the AiohttpClient.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        """
        ...
    async def GET(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform GET HTTP request."""
        ...
    async def HEAD(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform HEAD HTTP request."""
        ...
    async def OPTIONS(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform OPTIONS HTTP request."""
        ...
    async def DELETE(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform DELETE HTTP request."""
        ...
    async def POST(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform POST HTTP request."""
        ...
    async def PUT(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform PUT HTTP request."""
        ...
    async def PATCH(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
    ):
        """Perform PATCH HTTP request."""
        ...
