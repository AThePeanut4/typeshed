"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

class TypeWithDefault(type):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    def __init__(cls, name, bases, dct) -> None:
        """Initialize with defaults."""
        ...
    def __call__(cls):
        """Call self as a function."""
        ...
    def set_default(cls, default) -> None:
        """Set dafaults."""
        ...

class Configuration(metaclass=TypeWithDefault):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    host: str
    temp_folder_path: Incomplete
    api_key: Incomplete
    api_key_prefix: Incomplete
    username: str
    password: str
    loggers: Incomplete
    logger_stream_handler: Incomplete
    logger_file_handler: Incomplete
    verify_ssl: bool
    ssl_ca_cert: Incomplete
    cert_file: Incomplete
    cert_key_file: Incomplete
    cert_key_password: Incomplete
    assert_hostname: Incomplete
    ssl_context: Incomplete
    connection_pool_maxsize: Incomplete
    timeout: Incomplete
    auth_basic: bool
    proxy: Incomplete
    proxy_headers: Incomplete
    safe_chars_for_path_param: str
    logger_formatter: Incomplete
    def __init__(self) -> None:
        """Initialize configuration."""
        ...
    @property
    def logger_file(self):
        """
        Logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        ...
    @logger_file.setter
    def logger_file(self, value) -> None:
        """
        Logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        ...
    @property
    def debug(self):
        """
        Debug status.

        :param value: The debug status, True or False.
        :type: bool
        """
        ...
    @debug.setter
    def debug(self, value):
        """
        Debug status.

        :param value: The debug status, True or False.
        :type: bool
        """
        ...
    @property
    def logger_format(self):
        """
        Logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        ...
    @logger_format.setter
    def logger_format(self, value) -> None:
        """
        Logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        ...
    def get_api_key_with_prefix(self, identifier):
        """
        Get API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :return: The token for api key authentication.
        """
        ...
    def get_basic_auth_token(self):
        """
        Get HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        ...
    def auth_settings(self):
        """
        Get Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        ...
    def to_debug_report(self):
        """
        Get the essential information for debugging.

        :return: The report for debugging.
        """
        ...
    def update_request_header_params(self, path: str, params: dict[Incomplete, Incomplete]):
        """
        Update header params based on custom settings.

        :param path: Resource path
        :param params: Header parameters dict to be updated.
        """
        ...
    def update_request_body(self, path: str, body):
        """
        Update http body based on custom settings.

        :param path: Resource path
        :param body: Request body to be updated.
        :return: Updated body
        """
        ...
