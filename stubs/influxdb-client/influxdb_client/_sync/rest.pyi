"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

import io
from _typeshed import Incomplete

class RESTResponse(io.IOBase):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    urllib3_response: Incomplete
    status: Incomplete
    reason: Incomplete
    data: Incomplete
    def __init__(self, resp) -> None:
        """Initialize with HTTP response."""
        ...
    def getheaders(self):
        """Return a dictionary of the response headers."""
        ...
    def getheader(self, name, default: Incomplete | None = None):
        """Return a given response header."""
        ...

class RESTClientObject:
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    configuration: Incomplete
    pools_size: Incomplete
    maxsize: Incomplete
    retries: Incomplete
    pool_manager: Incomplete
    def __init__(self, configuration, pools_size: int = 4, maxsize: Incomplete | None = None, retries: bool = False) -> None:
        """Initialize REST client."""
        ...
    def request(
        self,
        method,
        url,
        query_params: Incomplete | None = None,
        headers: Incomplete | None = None,
        body: Incomplete | None = None,
        post_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """
        Perform requests.

        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param urlopen_kw: Additional parameters are passed to
                           :meth:`urllib3.request.RequestMethods.request`
        """
        ...
    def GET(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform GET HTTP request."""
        ...
    def HEAD(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform HEAD HTTP request."""
        ...
    def OPTIONS(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform OPTIONS HTTP request."""
        ...
    def DELETE(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform DELETE HTTP request."""
        ...
    def POST(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform POST HTTP request."""
        ...
    def PUT(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform PUT HTTP request."""
        ...
    def PATCH(
        self,
        url,
        headers: Incomplete | None = None,
        query_params: Incomplete | None = None,
        post_params: Incomplete | None = None,
        body: Incomplete | None = None,
        _preload_content: bool = True,
        _request_timeout: Incomplete | None = None,
        **urlopen_kw,
    ):
        """Perform PATCH HTTP request."""
        ...
