"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class CellsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """CellsService - a operation defined in OpenAPI."""
        ...
    def delete_dashboards_id_cells_id(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_cells_id(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_cells_id_with_http_info(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_cells_id_with_http_info(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_cells_id_async(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_cells_id_view(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_cells_id_view(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_cells_id_view_with_http_info(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_cells_id_view_with_http_info(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_cells_id_view_async(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id(dashboard_id, cell_id, cell_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_with_http_info(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_with_http_info(dashboard_id, cell_id, cell_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_dashboards_id_cells_id_async(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_view(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_view(dashboard_id, cell_id, view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_view_with_http_info(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_view_with_http_info(dashboard_id, cell_id, view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_dashboards_id_cells_id_view_async(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_cells(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_cells(dashboard_id, create_cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_cells_with_http_info(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_cells_with_http_info(dashboard_id, create_cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_id_cells_async(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_dashboards_id_cells(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dashboards_id_cells(dashboard_id, cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_dashboards_id_cells_with_http_info(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dashboards_id_cells_with_http_info(dashboard_id, cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def put_dashboards_id_cells_async(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
