"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class InvokableScriptsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """InvokableScriptsService - a operation defined in OpenAPI."""
        ...
    def delete_scripts_id(self, script_id, **kwargs):
        """
        Delete a script.

        Deletes a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) and all associated records.  #### Limitations  - You can delete only one script per request. - If the script ID you provide doesn't exist for the organization, InfluxDB responds with an HTTP `204` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scripts_id(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Deletes the specified script. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scripts_id_with_http_info(self, script_id, **kwargs):
        """
        Delete a script.

        Deletes a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) and all associated records.  #### Limitations  - You can delete only one script per request. - If the script ID you provide doesn't exist for the organization, InfluxDB responds with an HTTP `204` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scripts_id_with_http_info(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Deletes the specified script. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_scripts_id_async(self, script_id, **kwargs):
        """
        Delete a script.

        Deletes a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) and all associated records.  #### Limitations  - You can delete only one script per request. - If the script ID you provide doesn't exist for the organization, InfluxDB responds with an HTTP `204` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str script_id: A script ID. Deletes the specified script. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts(self, **kwargs):
        """
        List scripts.

        Lists [scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination]({{% INFLUXDB_DOCS_URL %}}/api/#tag/Pagination).
        :param int limit: The maximum number of scripts to return. Default is `100`.
        :param str name: The script name. Lists scripts with the specified name.
        :return: Scripts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts_with_http_info(self, **kwargs):
        """
        List scripts.

        Lists [scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination]({{% INFLUXDB_DOCS_URL %}}/api/#tag/Pagination).
        :param int limit: The maximum number of scripts to return. Default is `100`.
        :param str name: The script name. Lists scripts with the specified name.
        :return: Scripts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scripts_async(self, **kwargs):
        """
        List scripts.

        Lists [scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination]({{% INFLUXDB_DOCS_URL %}}/api/#tag/Pagination).
        :param int limit: The maximum number of scripts to return. Default is `100`.
        :param str name: The script name. Lists scripts with the specified name.
        :return: Scripts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts_id(self, script_id, **kwargs):
        """
        Retrieve a script.

        Retrieves a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts_id(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Retrieves the specified script. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts_id_with_http_info(self, script_id, **kwargs):
        """
        Retrieve a script.

        Retrieves a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts_id_with_http_info(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Retrieves the specified script. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scripts_id_async(self, script_id, **kwargs):
        """
        Retrieve a script.

        Retrieves a [script](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/).  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str script_id: A script ID. Retrieves the specified script. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts_id_params(self, script_id, **kwargs):
        """
        Find script parameters..

        Analyzes a script and determines required parameters. Find all `params` keys referenced in a script and return a list of keys. If it is possible to determine the type of the value from the context then the type is also returned -- for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  Requesting the parameters using `GET /api/v2/scripts/SCRIPT_ID/params` returns the following:  ```json {   "params": {     "mybucket": "string"   } } ```  The type name returned for a parameter will be one of:   - `any`  - `bool`  - `duration`  - `float`  - `int`  - `string`  - `time`  - `uint`  The type name `any` is used when the type of a parameter cannot be determined from the context, or the type is determined to be a structured type such as an array or record.  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts_id_params(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. The script to analyze for params. (required)
        :return: Params
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scripts_id_params_with_http_info(self, script_id, **kwargs):
        """
        Find script parameters..

        Analyzes a script and determines required parameters. Find all `params` keys referenced in a script and return a list of keys. If it is possible to determine the type of the value from the context then the type is also returned -- for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  Requesting the parameters using `GET /api/v2/scripts/SCRIPT_ID/params` returns the following:  ```json {   "params": {     "mybucket": "string"   } } ```  The type name returned for a parameter will be one of:   - `any`  - `bool`  - `duration`  - `float`  - `int`  - `string`  - `time`  - `uint`  The type name `any` is used when the type of a parameter cannot be determined from the context, or the type is determined to be a structured type such as an array or record.  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scripts_id_params_with_http_info(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. The script to analyze for params. (required)
        :return: Params
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scripts_id_params_async(self, script_id, **kwargs):
        """
        Find script parameters..

        Analyzes a script and determines required parameters. Find all `params` keys referenced in a script and return a list of keys. If it is possible to determine the type of the value from the context then the type is also returned -- for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  Requesting the parameters using `GET /api/v2/scripts/SCRIPT_ID/params` returns the following:  ```json {   "params": {     "mybucket": "string"   } } ```  The type name returned for a parameter will be one of:   - `any`  - `bool`  - `duration`  - `float`  - `int`  - `string`  - `time`  - `uint`  The type name `any` is used when the type of a parameter cannot be determined from the context, or the type is determined to be a structured type such as an array or record.  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str script_id: A script ID. The script to analyze for params. (required)
        :return: Params
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_scripts_id(self, script_id, script_update_request, **kwargs):
        """
        Update a script.

        Updates an invokable script.  Use this endpoint to modify values for script properties (`description` and `script`).  To update a script, pass an object that contains the updated key-value pairs.  #### Limitations  - If you send an empty request body, the script will neither update nor store an empty script, but InfluxDB will respond with an HTTP `200` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_scripts_id(script_id, script_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Updates the specified script. (required)
        :param ScriptUpdateRequest script_update_request: An object that contains the updated script properties to apply.  (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_scripts_id_with_http_info(self, script_id, script_update_request, **kwargs):
        """
        Update a script.

        Updates an invokable script.  Use this endpoint to modify values for script properties (`description` and `script`).  To update a script, pass an object that contains the updated key-value pairs.  #### Limitations  - If you send an empty request body, the script will neither update nor store an empty script, but InfluxDB will respond with an HTTP `200` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_scripts_id_with_http_info(script_id, script_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Updates the specified script. (required)
        :param ScriptUpdateRequest script_update_request: An object that contains the updated script properties to apply.  (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_scripts_id_async(self, script_id, script_update_request, **kwargs):
        """
        Update a script.

        Updates an invokable script.  Use this endpoint to modify values for script properties (`description` and `script`).  To update a script, pass an object that contains the updated key-value pairs.  #### Limitations  - If you send an empty request body, the script will neither update nor store an empty script, but InfluxDB will respond with an HTTP `200` status code.  #### Related Guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str script_id: A script ID. Updates the specified script. (required)
        :param ScriptUpdateRequest script_update_request: An object that contains the updated script properties to apply.  (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scripts(self, script_create_request, **kwargs):
        """
        Create a script.

        Creates an [invokable script](https://docs.influxdata.com/resources/videos/api-invokable-scripts/) and returns the script.  #### Related guides  - [Invokable scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) - [Creating custom InfluxDB endpoints](https://docs.influxdata.com/resources/videos/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scripts(script_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScriptCreateRequest script_create_request: The script to create. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scripts_with_http_info(self, script_create_request, **kwargs):
        """
        Create a script.

        Creates an [invokable script](https://docs.influxdata.com/resources/videos/api-invokable-scripts/) and returns the script.  #### Related guides  - [Invokable scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) - [Creating custom InfluxDB endpoints](https://docs.influxdata.com/resources/videos/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scripts_with_http_info(script_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScriptCreateRequest script_create_request: The script to create. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scripts_async(self, script_create_request, **kwargs):
        """
        Create a script.

        Creates an [invokable script](https://docs.influxdata.com/resources/videos/api-invokable-scripts/) and returns the script.  #### Related guides  - [Invokable scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/) - [Creating custom InfluxDB endpoints](https://docs.influxdata.com/resources/videos/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param ScriptCreateRequest script_create_request: The script to create. (required)
        :return: Script
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scripts_id_invoke(self, script_id, **kwargs):
        """
        Invoke a script.

        Runs a script and returns the result. When the script runs, InfluxDB replaces `params` keys referenced in the script with `params` key-values passed in the request body--for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  The following example `POST /api/v2/scripts/SCRIPT_ID/invoke` request body passes a value for the _`mybucket`_ parameter:  ```json {   "params": {     "mybucket": "air_sensor"   } } ```  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scripts_id_invoke(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Runs the specified script. (required)
        :param ScriptInvocationParams script_invocation_params:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scripts_id_invoke_with_http_info(self, script_id, **kwargs):
        """
        Invoke a script.

        Runs a script and returns the result. When the script runs, InfluxDB replaces `params` keys referenced in the script with `params` key-values passed in the request body--for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  The following example `POST /api/v2/scripts/SCRIPT_ID/invoke` request body passes a value for the _`mybucket`_ parameter:  ```json {   "params": {     "mybucket": "air_sensor"   } } ```  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scripts_id_invoke_with_http_info(script_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_id: A script ID. Runs the specified script. (required)
        :param ScriptInvocationParams script_invocation_params:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scripts_id_invoke_async(self, script_id, **kwargs):
        """
        Invoke a script.

        Runs a script and returns the result. When the script runs, InfluxDB replaces `params` keys referenced in the script with `params` key-values passed in the request body--for example:  The following sample script contains a _`mybucket`_ parameter :  ```json "script": "from(bucket: params.mybucket)             |> range(start: -7d)             |> limit(n:1)" ```  The following example `POST /api/v2/scripts/SCRIPT_ID/invoke` request body passes a value for the _`mybucket`_ parameter:  ```json {   "params": {     "mybucket": "air_sensor"   } } ```  #### Related guides  - [Invoke custom scripts](https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/)
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str script_id: A script ID. Runs the specified script. (required)
        :param ScriptInvocationParams script_invocation_params:
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
