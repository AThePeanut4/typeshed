"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class TelegrafsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """TelegrafsService - a operation defined in OpenAPI."""
        ...
    def delete_telegrafs_id(self, telegraf_id, **kwargs):
        """
        Delete a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_with_http_info(self, telegraf_id, **kwargs):
        """
        Delete a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_with_http_info(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_telegrafs_id_async(self, telegraf_id, **kwargs):
        """
        Delete a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_labels_id(self, telegraf_id, label_id, **kwargs):
        """
        Delete a label from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_labels_id(telegraf_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_labels_id_with_http_info(self, telegraf_id, label_id, **kwargs):
        """
        Delete a label from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_labels_id_with_http_info(telegraf_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_telegrafs_id_labels_id_async(self, telegraf_id, label_id, **kwargs):
        """
        Delete a label from a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_members_id(self, user_id, telegraf_id, **kwargs):
        """
        Remove a member from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_members_id(user_id, telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_members_id_with_http_info(self, user_id, telegraf_id, **kwargs):
        """
        Remove a member from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_members_id_with_http_info(user_id, telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_telegrafs_id_members_id_async(self, user_id, telegraf_id, **kwargs):
        """
        Remove a member from a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_owners_id(self, user_id, telegraf_id, **kwargs):
        """
        Remove an owner from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_owners_id(user_id, telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_telegrafs_id_owners_id_with_http_info(self, user_id, telegraf_id, **kwargs):
        """
        Remove an owner from a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_telegrafs_id_owners_id_with_http_info(user_id, telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_telegrafs_id_owners_id_async(self, user_id, telegraf_id, **kwargs):
        """
        Remove an owner from a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs(self, **kwargs):
        """
        List all Telegraf configurations.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID the Telegraf config belongs to.
        :return: Telegrafs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_with_http_info(self, **kwargs):
        """
        List all Telegraf configurations.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID the Telegraf config belongs to.
        :return: Telegrafs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_telegrafs_async(self, **kwargs):
        """
        List all Telegraf configurations.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID the Telegraf config belongs to.
        :return: Telegrafs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id(self, telegraf_id, **kwargs):
        """
        Retrieve a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str accept:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_with_http_info(self, telegraf_id, **kwargs):
        """
        Retrieve a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_with_http_info(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str accept:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_telegrafs_id_async(self, telegraf_id, **kwargs):
        """
        Retrieve a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str accept:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_labels(self, telegraf_id, **kwargs):
        """
        List all labels for a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_labels(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_labels_with_http_info(self, telegraf_id, **kwargs):
        """
        List all labels for a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_labels_with_http_info(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_telegrafs_id_labels_async(self, telegraf_id, **kwargs):
        """
        List all labels for a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_members(self, telegraf_id, **kwargs):
        """
        List all users with member privileges for a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_members(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_members_with_http_info(self, telegraf_id, **kwargs):
        """
        List all users with member privileges for a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_members_with_http_info(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_telegrafs_id_members_async(self, telegraf_id, **kwargs):
        """
        List all users with member privileges for a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_owners(self, telegraf_id, **kwargs):
        """
        List all owners of a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_owners(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_telegrafs_id_owners_with_http_info(self, telegraf_id, **kwargs):
        """
        List all owners of a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_telegrafs_id_owners_with_http_info(telegraf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_telegrafs_id_owners_async(self, telegraf_id, **kwargs):
        """
        List all owners of a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs(self, telegraf_plugin_request, **kwargs):
        """
        Create a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs(telegraf_plugin_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_with_http_info(self, telegraf_plugin_request, **kwargs):
        """
        Create a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_with_http_info(telegraf_plugin_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_telegrafs_async(self, telegraf_plugin_request, **kwargs):
        """
        Create a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_labels(self, telegraf_id, label_mapping, **kwargs):
        """
        Add a label to a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_labels(telegraf_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_labels_with_http_info(self, telegraf_id, label_mapping, **kwargs):
        """
        Add a label to a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_labels_with_http_info(telegraf_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_telegrafs_id_labels_async(self, telegraf_id, label_mapping, **kwargs):
        """
        Add a label to a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_members(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_members(telegraf_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_members_with_http_info(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a Telegraf config.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_members_with_http_info(telegraf_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_telegrafs_id_members_async(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a Telegraf config.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_owners(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_owners(telegraf_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_telegrafs_id_owners_with_http_info(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_telegrafs_id_owners_with_http_info(telegraf_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_telegrafs_id_owners_async(self, telegraf_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf configuration ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_telegrafs_id(self, telegraf_id, telegraf_plugin_request, **kwargs):
        """
        Update a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_telegrafs_id(telegraf_id, telegraf_plugin_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_telegrafs_id_with_http_info(self, telegraf_id, telegraf_plugin_request, **kwargs):
        """
        Update a Telegraf configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_telegrafs_id_with_http_info(telegraf_id, telegraf_plugin_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def put_telegrafs_id_async(self, telegraf_id, telegraf_plugin_request, **kwargs):
        """
        Update a Telegraf configuration.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str telegraf_id: The Telegraf config ID. (required)
        :param TelegrafPluginRequest telegraf_plugin_request: Telegraf configuration update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Telegraf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
