"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class DashboardsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """DashboardsService - a operation defined in OpenAPI."""
        ...
    def delete_dashboards_id(self, dashboard_id, **kwargs):
        """
        Delete a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_with_http_info(self, dashboard_id, **kwargs):
        """
        Delete a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_async(self, dashboard_id, **kwargs):
        """
        Delete a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_cells_id(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_cells_id(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_cells_id_with_http_info(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_cells_id_with_http_info(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_cells_id_async(self, dashboard_id, cell_id, **kwargs):
        """
        Delete a dashboard cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to delete. (required)
        :param str cell_id: The ID of the cell to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_labels_id(self, dashboard_id, label_id, **kwargs):
        """
        Delete a label from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_labels_id(dashboard_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_labels_id_with_http_info(self, dashboard_id, label_id, **kwargs):
        """
        Delete a label from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_labels_id_with_http_info(dashboard_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_labels_id_async(self, dashboard_id, label_id, **kwargs):
        """
        Delete a label from a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_members_id(self, user_id, dashboard_id, **kwargs):
        """
        Remove a member from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_members_id(user_id, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_members_id_with_http_info(self, user_id, dashboard_id, **kwargs):
        """
        Remove a member from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_members_id_with_http_info(user_id, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_members_id_async(self, user_id, dashboard_id, **kwargs):
        """
        Remove a member from a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of the member to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_owners_id(self, user_id, dashboard_id, **kwargs):
        """
        Remove an owner from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_owners_id(user_id, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_dashboards_id_owners_id_with_http_info(self, user_id, dashboard_id, **kwargs):
        """
        Remove an owner from a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dashboards_id_owners_id_with_http_info(user_id, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_dashboards_id_owners_id_async(self, user_id, dashboard_id, **kwargs):
        """
        Remove an owner from a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of the owner to remove. (required)
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards(self, **kwargs):
        """
        List dashboards.

        Lists [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard).  #### Related guides  - [Manage dashboards](https://docs.influxdata.com/influxdb/latest/visualize-data/dashboards/).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :param bool descending:
        :param str owner: A user ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) where the specified user has the `owner` role.
        :param str sort_by: The column to sort by.
        :param list[str] id: A list of dashboard IDs. Returns only the specified [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard). If you specify `id` and `owner`, only `id` is used.
        :param str org_id: An organization ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :param str org: An organization name. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :return: Dashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_with_http_info(self, **kwargs):
        """
        List dashboards.

        Lists [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard).  #### Related guides  - [Manage dashboards](https://docs.influxdata.com/influxdb/latest/visualize-data/dashboards/).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :param bool descending:
        :param str owner: A user ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) where the specified user has the `owner` role.
        :param str sort_by: The column to sort by.
        :param list[str] id: A list of dashboard IDs. Returns only the specified [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard). If you specify `id` and `owner`, only `id` is used.
        :param str org_id: An organization ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :param str org: An organization name. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :return: Dashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_async(self, **kwargs):
        """
        List dashboards.

        Lists [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard).  #### Related guides  - [Manage dashboards](https://docs.influxdata.com/influxdb/latest/visualize-data/dashboards/).
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :param bool descending:
        :param str owner: A user ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) where the specified user has the `owner` role.
        :param str sort_by: The column to sort by.
        :param list[str] id: A list of dashboard IDs. Returns only the specified [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard). If you specify `id` and `owner`, only `id` is used.
        :param str org_id: An organization ID. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :param str org: An organization name. Only returns [dashboards](https://docs.influxdata.com/influxdb/latest/reference/glossary/#dashboard) that belong to the specified [organization](https://docs.influxdata.com/influxdb/latest/reference/glossary/#organization).
        :return: Dashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id(self, dashboard_id, **kwargs):
        """
        Retrieve a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str include: If `properties`, includes the cell view properties in the response.
        :return: DashboardWithViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_with_http_info(self, dashboard_id, **kwargs):
        """
        Retrieve a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str include: If `properties`, includes the cell view properties in the response.
        :return: DashboardWithViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_async(self, dashboard_id, **kwargs):
        """
        Retrieve a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str include: If `properties`, includes the cell view properties in the response.
        :return: DashboardWithViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_cells_id_view(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_cells_id_view(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_cells_id_view_with_http_info(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_cells_id_view_with_http_info(dashboard_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_cells_id_view_async(self, dashboard_id, cell_id, **kwargs):
        """
        Retrieve the view for a cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str cell_id: The cell ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_labels(self, dashboard_id, **kwargs):
        """
        List all labels for a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_labels(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_labels_with_http_info(self, dashboard_id, **kwargs):
        """
        List all labels for a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_labels_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_labels_async(self, dashboard_id, **kwargs):
        """
        List all labels for a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_members(self, dashboard_id, **kwargs):
        """
        List all dashboard members.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_members(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_members_with_http_info(self, dashboard_id, **kwargs):
        """
        List all dashboard members.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_members_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_members_async(self, dashboard_id, **kwargs):
        """
        List all dashboard members.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_owners(self, dashboard_id, **kwargs):
        """
        List all dashboard owners.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_owners(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_dashboards_id_owners_with_http_info(self, dashboard_id, **kwargs):
        """
        List all dashboard owners.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboards_id_owners_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_dashboards_id_owners_async(self, dashboard_id, **kwargs):
        """
        List all dashboard owners.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id(self, dashboard_id, **kwargs):
        """
        Update a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param PatchDashboardRequest patch_dashboard_request:
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_with_http_info(self, dashboard_id, **kwargs):
        """
        Update a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param PatchDashboardRequest patch_dashboard_request:
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_dashboards_id_async(self, dashboard_id, **kwargs):
        """
        Update a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :param PatchDashboardRequest patch_dashboard_request:
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id(dashboard_id, cell_id, cell_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_with_http_info(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_with_http_info(dashboard_id, cell_id, cell_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_dashboards_id_cells_id_async(self, dashboard_id, cell_id, cell_update, **kwargs):
        """
        Update the non-positional information related to a cell.

        Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param CellUpdate cell_update: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_view(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_view(dashboard_id, cell_id, view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_dashboards_id_cells_id_view_with_http_info(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dashboards_id_cells_id_view_with_http_info(dashboard_id, cell_id, view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_dashboards_id_cells_id_view_async(self, dashboard_id, cell_id, view, **kwargs):
        """
        Update the view for a cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param str cell_id: The ID of the cell to update. (required)
        :param View view: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards(self, create_dashboard_request, **kwargs):
        """
        Create a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards(create_dashboard_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDashboardRequest create_dashboard_request: Dashboard to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_with_http_info(self, create_dashboard_request, **kwargs):
        """
        Create a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_with_http_info(create_dashboard_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDashboardRequest create_dashboard_request: Dashboard to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_async(self, create_dashboard_request, **kwargs):
        """
        Create a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param CreateDashboardRequest create_dashboard_request: Dashboard to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_cells(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_cells(dashboard_id, create_cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_cells_with_http_info(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_cells_with_http_info(dashboard_id, create_cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_id_cells_async(self, dashboard_id, create_cell, **kwargs):
        """
        Create a dashboard cell.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param CreateCell create_cell: Cell that will be added (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Cell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_labels(self, dashboard_id, label_mapping, **kwargs):
        """
        Add a label to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_labels(dashboard_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_labels_with_http_info(self, dashboard_id, label_mapping, **kwargs):
        """
        Add a label to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_labels_with_http_info(dashboard_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_id_labels_async(self, dashboard_id, label_mapping, **kwargs):
        """
        Add a label to a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_members(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_members(dashboard_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_members_with_http_info(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_members_with_http_info(dashboard_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_id_members_async(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_owners(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_owners(dashboard_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_dashboards_id_owners_with_http_info(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dashboards_id_owners_with_http_info(dashboard_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_dashboards_id_owners_async(self, dashboard_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a dashboard.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The dashboard ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_dashboards_id_cells(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dashboards_id_cells(dashboard_id, cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_dashboards_id_cells_with_http_info(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dashboards_id_cells_with_http_info(dashboard_id, cell, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def put_dashboards_id_cells_async(self, dashboard_id, cell, **kwargs):
        """
        Replace cells in a dashboard.

        Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str dashboard_id: The ID of the dashboard to update. (required)
        :param list[Cell] cell: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
