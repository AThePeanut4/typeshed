"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class NotificationEndpointsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """NotificationEndpointsService - a operation defined in OpenAPI."""
        ...
    def create_notification_endpoint(self, post_notification_endpoint, **kwargs):
        """
        Add a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_endpoint(post_notification_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostNotificationEndpoint post_notification_endpoint: Notification endpoint to create (required)
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def create_notification_endpoint_with_http_info(self, post_notification_endpoint, **kwargs):
        """
        Add a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_endpoint_with_http_info(post_notification_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostNotificationEndpoint post_notification_endpoint: Notification endpoint to create (required)
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def create_notification_endpoint_async(self, post_notification_endpoint, **kwargs):
        """
        Add a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param PostNotificationEndpoint post_notification_endpoint: Notification endpoint to create (required)
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_notification_endpoints_id(self, endpoint_id, **kwargs):
        """
        Delete a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_endpoints_id(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_notification_endpoints_id_with_http_info(self, endpoint_id, **kwargs):
        """
        Delete a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_endpoints_id_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_notification_endpoints_id_async(self, endpoint_id, **kwargs):
        """
        Delete a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_notification_endpoints_id_labels_id(self, endpoint_id, label_id, **kwargs):
        """
        Delete a label from a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_endpoints_id_labels_id(endpoint_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_notification_endpoints_id_labels_id_with_http_info(self, endpoint_id, label_id, **kwargs):
        """
        Delete a label from a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_endpoints_id_labels_id_with_http_info(endpoint_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_notification_endpoints_id_labels_id_async(self, endpoint_id, label_id, **kwargs):
        """
        Delete a label from a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints(self, org_id, **kwargs):
        """
        List all notification endpoints.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Only show notification endpoints that belong to specific organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :return: NotificationEndpoints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints_with_http_info(self, org_id, **kwargs):
        """
        List all notification endpoints.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Only show notification endpoints that belong to specific organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :return: NotificationEndpoints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_notification_endpoints_async(self, org_id, **kwargs):
        """
        List all notification endpoints.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: Only show notification endpoints that belong to specific organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param int offset: The offset for pagination. The number of records to skip.  For more information about pagination parameters, see [Pagination](https://docs.influxdata.com/influxdb/latest/api/#tag/Pagination).
        :param int limit: Limits the number of records returned. Default is `20`.
        :return: NotificationEndpoints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints_id(self, endpoint_id, **kwargs):
        """
        Retrieve a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints_id(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints_id_with_http_info(self, endpoint_id, **kwargs):
        """
        Retrieve a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints_id_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_notification_endpoints_id_async(self, endpoint_id, **kwargs):
        """
        Retrieve a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints_id_labels(self, endpoint_id, **kwargs):
        """
        List all labels for a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints_id_labels(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_notification_endpoints_id_labels_with_http_info(self, endpoint_id, **kwargs):
        """
        List all labels for a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_endpoints_id_labels_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_notification_endpoints_id_labels_async(self, endpoint_id, **kwargs):
        """
        List all labels for a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_notification_endpoints_id(self, endpoint_id, notification_endpoint_update, **kwargs):
        """
        Update a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_notification_endpoints_id(endpoint_id, notification_endpoint_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpointUpdate notification_endpoint_update: Check update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_notification_endpoints_id_with_http_info(self, endpoint_id, notification_endpoint_update, **kwargs):
        """
        Update a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_notification_endpoints_id_with_http_info(endpoint_id, notification_endpoint_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpointUpdate notification_endpoint_update: Check update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_notification_endpoints_id_async(self, endpoint_id, notification_endpoint_update, **kwargs):
        """
        Update a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpointUpdate notification_endpoint_update: Check update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_notification_endpoint_id_labels(self, endpoint_id, label_mapping, **kwargs):
        """
        Add a label to a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_notification_endpoint_id_labels(endpoint_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_notification_endpoint_id_labels_with_http_info(self, endpoint_id, label_mapping, **kwargs):
        """
        Add a label to a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_notification_endpoint_id_labels_with_http_info(endpoint_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_notification_endpoint_id_labels_async(self, endpoint_id, label_mapping, **kwargs):
        """
        Add a label to a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_notification_endpoints_id(self, endpoint_id, notification_endpoint, **kwargs):
        """
        Update a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notification_endpoints_id(endpoint_id, notification_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpoint notification_endpoint: A new notification endpoint to replace the existing endpoint with (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_notification_endpoints_id_with_http_info(self, endpoint_id, notification_endpoint, **kwargs):
        """
        Update a notification endpoint.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notification_endpoints_id_with_http_info(endpoint_id, notification_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpoint notification_endpoint: A new notification endpoint to replace the existing endpoint with (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def put_notification_endpoints_id_async(self, endpoint_id, notification_endpoint, **kwargs):
        """
        Update a notification endpoint.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str endpoint_id: The notification endpoint ID. (required)
        :param NotificationEndpoint notification_endpoint: A new notification endpoint to replace the existing endpoint with (required)
        :param str zap_trace_span: OpenTracing span context
        :return: NotificationEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
