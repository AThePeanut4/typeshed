"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class SecretsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """SecretsService - a operation defined in OpenAPI."""
        ...
    def delete_orgs_id_secrets_id(self, org_id, secret_id, **kwargs):
        """
        Delete a secret from an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_orgs_id_secrets_id(org_id, secret_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str secret_id: The secret ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_orgs_id_secrets_id_with_http_info(self, org_id, secret_id, **kwargs):
        """
        Delete a secret from an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_orgs_id_secrets_id_with_http_info(org_id, secret_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str secret_id: The secret ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_orgs_id_secrets_id_async(self, org_id, secret_id, **kwargs):
        """
        Delete a secret from an organization.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str secret_id: The secret ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_orgs_id_secrets(self, org_id, **kwargs):
        """
        List all secret keys for an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_orgs_id_secrets(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: SecretKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_orgs_id_secrets_with_http_info(self, org_id, **kwargs):
        """
        List all secret keys for an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_orgs_id_secrets_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: SecretKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_orgs_id_secrets_async(self, org_id, **kwargs):
        """
        List all secret keys for an organization.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: SecretKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_orgs_id_secrets(self, org_id, request_body, **kwargs):
        """
        Update secrets in an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_orgs_id_secrets(org_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param dict(str, str) request_body: Secret key value pairs to update/add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_orgs_id_secrets_with_http_info(self, org_id, request_body, **kwargs):
        """
        Update secrets in an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_orgs_id_secrets_with_http_info(org_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param dict(str, str) request_body: Secret key value pairs to update/add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_orgs_id_secrets_async(self, org_id, request_body, **kwargs):
        """
        Update secrets in an organization.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param dict(str, str) request_body: Secret key value pairs to update/add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_orgs_id_secrets(self, org_id, secret_keys, **kwargs):
        """
        Delete secrets from an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_orgs_id_secrets(org_id, secret_keys, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param SecretKeys secret_keys: Secret key to delete (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_orgs_id_secrets_with_http_info(self, org_id, secret_keys, **kwargs):
        """
        Delete secrets from an organization.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_orgs_id_secrets_with_http_info(org_id, secret_keys, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param SecretKeys secret_keys: Secret key to delete (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_orgs_id_secrets_async(self, org_id, secret_keys, **kwargs):
        """
        Delete secrets from an organization.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param SecretKeys secret_keys: Secret key to delete (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
