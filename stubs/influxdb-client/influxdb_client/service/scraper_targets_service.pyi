"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class ScraperTargetsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """ScraperTargetsService - a operation defined in OpenAPI."""
        ...
    def delete_scrapers_id(self, scraper_target_id, **kwargs):
        """
        Delete a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_with_http_info(self, scraper_target_id, **kwargs):
        """
        Delete a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_with_http_info(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_scrapers_id_async(self, scraper_target_id, **kwargs):
        """
        Delete a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_labels_id(self, scraper_target_id, label_id, **kwargs):
        """
        Delete a label from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_labels_id(scraper_target_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_labels_id_with_http_info(self, scraper_target_id, label_id, **kwargs):
        """
        Delete a label from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_labels_id_with_http_info(scraper_target_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_scrapers_id_labels_id_async(self, scraper_target_id, label_id, **kwargs):
        """
        Delete a label from a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str label_id: The label ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_members_id(self, user_id, scraper_target_id, **kwargs):
        """
        Remove a member from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_members_id(user_id, scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of member to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_members_id_with_http_info(self, user_id, scraper_target_id, **kwargs):
        """
        Remove a member from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_members_id_with_http_info(user_id, scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of member to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_scrapers_id_members_id_async(self, user_id, scraper_target_id, **kwargs):
        """
        Remove a member from a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of member to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_owners_id(self, user_id, scraper_target_id, **kwargs):
        """
        Remove an owner from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_owners_id(user_id, scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of owner to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_scrapers_id_owners_id_with_http_info(self, user_id, scraper_target_id, **kwargs):
        """
        Remove an owner from a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scrapers_id_owners_id_with_http_info(user_id, scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The ID of owner to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_scrapers_id_owners_id_async(self, user_id, scraper_target_id, **kwargs):
        """
        Remove an owner from a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str user_id: The ID of owner to remove. (required)
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers(self, **kwargs):
        """
        List all scraper targets.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str name: Specifies the name of the scraper target.
        :param list[str] id: List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.
        :param str org_id: Specifies the organization ID of the scraper target.
        :param str org: Specifies the organization name of the scraper target.
        :return: ScraperTargetResponses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_with_http_info(self, **kwargs):
        """
        List all scraper targets.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str name: Specifies the name of the scraper target.
        :param list[str] id: List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.
        :param str org_id: Specifies the organization ID of the scraper target.
        :param str org: Specifies the organization name of the scraper target.
        :return: ScraperTargetResponses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scrapers_async(self, **kwargs):
        """
        List all scraper targets.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str name: Specifies the name of the scraper target.
        :param list[str] id: List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.
        :param str org_id: Specifies the organization ID of the scraper target.
        :param str org: Specifies the organization name of the scraper target.
        :return: ScraperTargetResponses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id(self, scraper_target_id, **kwargs):
        """
        Retrieve a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_with_http_info(self, scraper_target_id, **kwargs):
        """
        Retrieve a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_with_http_info(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scrapers_id_async(self, scraper_target_id, **kwargs):
        """
        Retrieve a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_labels(self, scraper_target_id, **kwargs):
        """
        List all labels for a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_labels(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_labels_with_http_info(self, scraper_target_id, **kwargs):
        """
        List all labels for a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_labels_with_http_info(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scrapers_id_labels_async(self, scraper_target_id, **kwargs):
        """
        List all labels for a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_members(self, scraper_target_id, **kwargs):
        """
        List all users with member privileges for a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_members(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_members_with_http_info(self, scraper_target_id, **kwargs):
        """
        List all users with member privileges for a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_members_with_http_info(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scrapers_id_members_async(self, scraper_target_id, **kwargs):
        """
        List all users with member privileges for a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_owners(self, scraper_target_id, **kwargs):
        """
        List all owners of a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_owners(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_scrapers_id_owners_with_http_info(self, scraper_target_id, **kwargs):
        """
        List all owners of a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scrapers_id_owners_with_http_info(scraper_target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_scrapers_id_owners_async(self, scraper_target_id, **kwargs):
        """
        List all owners of a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_scrapers_id(self, scraper_target_id, scraper_target_request, **kwargs):
        """
        Update a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_scrapers_id(scraper_target_id, scraper_target_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param ScraperTargetRequest scraper_target_request: Scraper target update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_scrapers_id_with_http_info(self, scraper_target_id, scraper_target_request, **kwargs):
        """
        Update a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_scrapers_id_with_http_info(scraper_target_id, scraper_target_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param ScraperTargetRequest scraper_target_request: Scraper target update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_scrapers_id_async(self, scraper_target_id, scraper_target_request, **kwargs):
        """
        Update a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The identifier of the scraper target. (required)
        :param ScraperTargetRequest scraper_target_request: Scraper target update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers(self, scraper_target_request, **kwargs):
        """
        Create a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers(scraper_target_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScraperTargetRequest scraper_target_request: Scraper target to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_with_http_info(self, scraper_target_request, **kwargs):
        """
        Create a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_with_http_info(scraper_target_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScraperTargetRequest scraper_target_request: Scraper target to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scrapers_async(self, scraper_target_request, **kwargs):
        """
        Create a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param ScraperTargetRequest scraper_target_request: Scraper target to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ScraperTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_labels(self, scraper_target_id, label_mapping, **kwargs):
        """
        Add a label to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_labels(scraper_target_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_labels_with_http_info(self, scraper_target_id, label_mapping, **kwargs):
        """
        Add a label to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_labels_with_http_info(scraper_target_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scrapers_id_labels_async(self, scraper_target_id, label_mapping, **kwargs):
        """
        Add a label to a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_members(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_members(scraper_target_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_members_with_http_info(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_members_with_http_info(scraper_target_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scrapers_id_members_async(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add a member to a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as member (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_owners(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_owners(scraper_target_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_scrapers_id_owners_with_http_info(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a scraper target.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_scrapers_id_owners_with_http_info(scraper_target_id, add_resource_member_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_scrapers_id_owners_async(self, scraper_target_id, add_resource_member_request_body, **kwargs):
        """
        Add an owner to a scraper target.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str scraper_target_id: The scraper target ID. (required)
        :param AddResourceMemberRequestBody add_resource_member_request_body: User to add as owner (required)
        :param str zap_trace_span: OpenTracing span context
        :return: ResourceOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
