"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class LabelsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """LabelsService - a operation defined in OpenAPI."""
        ...
    def delete_labels_id(self, label_id, **kwargs):
        """
        Delete a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_labels_id(label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_labels_id_with_http_info(self, label_id, **kwargs):
        """
        Delete a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_labels_id_with_http_info(label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_labels_id_async(self, label_id, **kwargs):
        """
        Delete a label.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str label_id: The ID of the label to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_labels(self, **kwargs):
        """
        List all labels.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID.
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_labels_with_http_info(self, **kwargs):
        """
        List all labels.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID.
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_labels_async(self, **kwargs):
        """
        List all labels.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org_id: The organization ID.
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_labels_id(self, label_id, **kwargs):
        """
        Retrieve a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels_id(label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_labels_id_with_http_info(self, label_id, **kwargs):
        """
        Retrieve a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels_id_with_http_info(label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_labels_id_async(self, label_id, **kwargs):
        """
        Retrieve a label.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_labels_id(self, label_id, label_update, **kwargs):
        """
        Update a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_labels_id(label_id, label_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param LabelUpdate label_update: A label update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_labels_id_with_http_info(self, label_id, label_update, **kwargs):
        """
        Update a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_labels_id_with_http_info(label_id, label_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param LabelUpdate label_update: A label update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_labels_id_async(self, label_id, label_update, **kwargs):
        """
        Update a label.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str label_id: The ID of the label to update. (required)
        :param LabelUpdate label_update: A label update. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_labels(self, label_create_request, **kwargs):
        """
        Create a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_labels(label_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LabelCreateRequest label_create_request: The label to create. (required)
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_labels_with_http_info(self, label_create_request, **kwargs):
        """
        Create a label.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_labels_with_http_info(label_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LabelCreateRequest label_create_request: The label to create. (required)
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_labels_async(self, label_create_request, **kwargs):
        """
        Create a label.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param LabelCreateRequest label_create_request: The label to create. (required)
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
