"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class ReplicationsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """ReplicationsService - a operation defined in OpenAPI."""
        ...
    def delete_replication_by_id(self, replication_id, **kwargs):
        """
        Delete a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_replication_by_id(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_replication_by_id_with_http_info(self, replication_id, **kwargs):
        """
        Delete a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_replication_by_id_with_http_info(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_replication_by_id_async(self, replication_id, **kwargs):
        """
        Delete a replication.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_replication_by_id(self, replication_id, **kwargs):
        """
        Retrieve a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_replication_by_id(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_replication_by_id_with_http_info(self, replication_id, **kwargs):
        """
        Retrieve a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_replication_by_id_with_http_info(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_replication_by_id_async(self, replication_id, **kwargs):
        """
        Retrieve a replication.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_replications(self, org_id, **kwargs):
        """
        List all replications.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_replications(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_id:
        :param str local_bucket_id:
        :return: Replications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_replications_with_http_info(self, org_id, **kwargs):
        """
        List all replications.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_replications_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_id:
        :param str local_bucket_id:
        :return: Replications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_replications_async(self, org_id, **kwargs):
        """
        List all replications.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_id:
        :param str local_bucket_id:
        :return: Replications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_replication_by_id(self, replication_id, replication_update_request, **kwargs):
        """
        Update a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_replication_by_id(replication_id, replication_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param ReplicationUpdateRequest replication_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the updated information, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_replication_by_id_with_http_info(self, replication_id, replication_update_request, **kwargs):
        """
        Update a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_replication_by_id_with_http_info(replication_id, replication_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param ReplicationUpdateRequest replication_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the updated information, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_replication_by_id_async(self, replication_id, replication_update_request, **kwargs):
        """
        Update a replication.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str replication_id: (required)
        :param ReplicationUpdateRequest replication_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the updated information, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_replication(self, replication_creation_request, **kwargs):
        """
        Register a new replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_replication(replication_creation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReplicationCreationRequest replication_creation_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the replication, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_replication_with_http_info(self, replication_creation_request, **kwargs):
        """
        Register a new replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_replication_with_http_info(replication_creation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReplicationCreationRequest replication_creation_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the replication, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_replication_async(self, replication_creation_request, **kwargs):
        """
        Register a new replication.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param ReplicationCreationRequest replication_creation_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :param bool validate: If true, validate the replication, but don't save it.
        :return: Replication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_validate_replication_by_id(self, replication_id, **kwargs):
        """
        Validate a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_validate_replication_by_id(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_validate_replication_by_id_with_http_info(self, replication_id, **kwargs):
        """
        Validate a replication.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_validate_replication_by_id_with_http_info(replication_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_validate_replication_by_id_async(self, replication_id, **kwargs):
        """
        Validate a replication.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str replication_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
