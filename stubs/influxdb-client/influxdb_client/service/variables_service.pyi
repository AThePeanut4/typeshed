"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class VariablesService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """VariablesService - a operation defined in OpenAPI."""
        ...
    def delete_variables_id(self, variable_id, **kwargs):
        """
        Delete a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_id(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_variables_id_with_http_info(self, variable_id, **kwargs):
        """
        Delete a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_id_with_http_info(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_variables_id_async(self, variable_id, **kwargs):
        """
        Delete a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_variables_id_labels_id(self, variable_id, label_id, **kwargs):
        """
        Delete a label from a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_id_labels_id(variable_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str label_id: The label ID to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_variables_id_labels_id_with_http_info(self, variable_id, label_id, **kwargs):
        """
        Delete a label from a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_id_labels_id_with_http_info(variable_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str label_id: The label ID to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_variables_id_labels_id_async(self, variable_id, label_id, **kwargs):
        """
        Delete a label from a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str label_id: The label ID to delete. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables(self, **kwargs):
        """
        List all variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org: The name of the organization.
        :param str org_id: The organization ID.
        :return: Variables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables_with_http_info(self, **kwargs):
        """
        List all variables.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org: The name of the organization.
        :param str org_id: The organization ID.
        :return: Variables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_variables_async(self, **kwargs):
        """
        List all variables.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str zap_trace_span: OpenTracing span context
        :param str org: The name of the organization.
        :param str org_id: The organization ID.
        :return: Variables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables_id(self, variable_id, **kwargs):
        """
        Retrieve a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_id(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables_id_with_http_info(self, variable_id, **kwargs):
        """
        Retrieve a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_id_with_http_info(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_variables_id_async(self, variable_id, **kwargs):
        """
        Retrieve a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables_id_labels(self, variable_id, **kwargs):
        """
        List all labels for a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_id_labels(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_variables_id_labels_with_http_info(self, variable_id, **kwargs):
        """
        List all labels for a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_id_labels_with_http_info(variable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_variables_id_labels_async(self, variable_id, **kwargs):
        """
        List all labels for a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_variables_id(self, variable_id, variable, **kwargs):
        """
        Update a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_variables_id(variable_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_variables_id_with_http_info(self, variable_id, variable, **kwargs):
        """
        Update a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_variables_id_with_http_info(variable_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_variables_id_async(self, variable_id, variable, **kwargs):
        """
        Update a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable update to apply (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_variables(self, variable, **kwargs):
        """
        Create a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_variables(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Variable variable: Variable to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_variables_with_http_info(self, variable, **kwargs):
        """
        Create a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_variables_with_http_info(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Variable variable: Variable to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_variables_async(self, variable, **kwargs):
        """
        Create a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param Variable variable: Variable to create (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_variables_id_labels(self, variable_id, label_mapping, **kwargs):
        """
        Add a label to a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_variables_id_labels(variable_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_variables_id_labels_with_http_info(self, variable_id, label_mapping, **kwargs):
        """
        Add a label to a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_variables_id_labels_with_http_info(variable_id, label_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_variables_id_labels_async(self, variable_id, label_mapping, **kwargs):
        """
        Add a label to a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param LabelMapping label_mapping: Label to add (required)
        :param str zap_trace_span: OpenTracing span context
        :return: LabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_variables_id(self, variable_id, variable, **kwargs):
        """
        Replace a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_variables_id(variable_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable to replace (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def put_variables_id_with_http_info(self, variable_id, variable, **kwargs):
        """
        Replace a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_variables_id_with_http_info(variable_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable to replace (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def put_variables_id_async(self, variable_id, variable, **kwargs):
        """
        Replace a variable.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str variable_id: The variable ID. (required)
        :param Variable variable: Variable to replace (required)
        :param str zap_trace_span: OpenTracing span context
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
