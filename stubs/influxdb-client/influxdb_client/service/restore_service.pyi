"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class RestoreService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """RestoreService - a operation defined in OpenAPI."""
        ...
    def post_restore_bucket_id(self, bucket_id, body, **kwargs):
        """
        Overwrite storage metadata for a bucket with shard info from a backup..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_bucket_id(bucket_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_id: The bucket ID. (required)
        :param str body: Database info serialized as protobuf. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_type:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_bucket_id_with_http_info(self, bucket_id, body, **kwargs):
        """
        Overwrite storage metadata for a bucket with shard info from a backup..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_bucket_id_with_http_info(bucket_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_id: The bucket ID. (required)
        :param str body: Database info serialized as protobuf. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_type:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_restore_bucket_id_async(self, bucket_id, body, **kwargs):
        """
        Overwrite storage metadata for a bucket with shard info from a backup..

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str bucket_id: The bucket ID. (required)
        :param str body: Database info serialized as protobuf. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_type:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_bucket_metadata(self, bucket_metadata_manifest, **kwargs):
        """
        Create a new bucket pre-seeded with shard info from a backup..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_bucket_metadata(bucket_metadata_manifest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BucketMetadataManifest bucket_metadata_manifest: Metadata manifest for a bucket. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RestoredBucketMappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_bucket_metadata_with_http_info(self, bucket_metadata_manifest, **kwargs):
        """
        Create a new bucket pre-seeded with shard info from a backup..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_bucket_metadata_with_http_info(bucket_metadata_manifest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BucketMetadataManifest bucket_metadata_manifest: Metadata manifest for a bucket. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RestoredBucketMappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_restore_bucket_metadata_async(self, bucket_metadata_manifest, **kwargs):
        """
        Create a new bucket pre-seeded with shard info from a backup..

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param BucketMetadataManifest bucket_metadata_manifest: Metadata manifest for a bucket. (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RestoredBucketMappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_kv(self, body, **kwargs):
        """
        Overwrite the embedded KV store on the server with a backed-up snapshot..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_kv(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file body: Full KV snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: PostRestoreKVResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_kv_with_http_info(self, body, **kwargs):
        """
        Overwrite the embedded KV store on the server with a backed-up snapshot..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_kv_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file body: Full KV snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: PostRestoreKVResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_restore_kv_async(self, body, **kwargs):
        """
        Overwrite the embedded KV store on the server with a backed-up snapshot..

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param file body: Full KV snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: PostRestoreKVResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_shard_id(self, shard_id, body, **kwargs):
        """
        Restore a TSM snapshot into a shard..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_shard_id(shard_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shard_id: The shard ID. (required)
        :param file body: TSM snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_shard_id_with_http_info(self, shard_id, body, **kwargs):
        """
        Restore a TSM snapshot into a shard..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_shard_id_with_http_info(shard_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shard_id: The shard ID. (required)
        :param file body: TSM snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_restore_shard_id_async(self, shard_id, body, **kwargs):
        """
        Restore a TSM snapshot into a shard..

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str shard_id: The shard ID. (required)
        :param file body: TSM snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_sql(self, body, **kwargs):
        """
        Overwrite the embedded SQL store on the server with a backed-up snapshot..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_sql(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file body: Full SQL snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_restore_sql_with_http_info(self, body, **kwargs):
        """
        Overwrite the embedded SQL store on the server with a backed-up snapshot..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_restore_sql_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file body: Full SQL snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_restore_sql_async(self, body, **kwargs):
        """
        Overwrite the embedded SQL store on the server with a backed-up snapshot..

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param file body: Full SQL snapshot. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str content_encoding: The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
