"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class RemoteConnectionsService(_BaseService):
    """
    NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client: Incomplete | None = None) -> None:
        """RemoteConnectionsService - a operation defined in OpenAPI."""
        ...
    def delete_remote_connection_by_id(self, remote_id, **kwargs):
        """
        Delete a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_remote_connection_by_id(remote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def delete_remote_connection_by_id_with_http_info(self, remote_id, **kwargs):
        """
        Delete a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_remote_connection_by_id_with_http_info(remote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def delete_remote_connection_by_id_async(self, remote_id, **kwargs):
        """
        Delete a remote connection.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_remote_connection_by_id(self, remote_id, **kwargs):
        """
        Retrieve a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_connection_by_id(remote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_remote_connection_by_id_with_http_info(self, remote_id, **kwargs):
        """
        Retrieve a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_connection_by_id_with_http_info(remote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_remote_connection_by_id_async(self, remote_id, **kwargs):
        """
        Retrieve a remote connection.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str remote_id: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_remote_connections(self, org_id, **kwargs):
        """
        List all remote connections.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_connections(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_url:
        :return: RemoteConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def get_remote_connections_with_http_info(self, org_id, **kwargs):
        """
        List all remote connections.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_connections_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_url:
        :return: RemoteConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def get_remote_connections_async(self, org_id, **kwargs):
        """
        List all remote connections.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str org_id: The organization ID. (required)
        :param str zap_trace_span: OpenTracing span context
        :param str name:
        :param str remote_url:
        :return: RemoteConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_remote_connection_by_id(self, remote_id, remote_connection_update_request, **kwargs):
        """
        Update a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_remote_connection_by_id(remote_id, remote_connection_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param RemoteConnectionUpdateRequest remote_connection_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def patch_remote_connection_by_id_with_http_info(self, remote_id, remote_connection_update_request, **kwargs):
        """
        Update a remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_remote_connection_by_id_with_http_info(remote_id, remote_connection_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str remote_id: (required)
        :param RemoteConnectionUpdateRequest remote_connection_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def patch_remote_connection_by_id_async(self, remote_id, remote_connection_update_request, **kwargs):
        """
        Update a remote connection.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param str remote_id: (required)
        :param RemoteConnectionUpdateRequest remote_connection_update_request: (required)
        :param str zap_trace_span: OpenTracing span context
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_remote_connection(self, remote_connection_creation_request, **kwargs):
        """
        Register a new remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_remote_connection(remote_connection_creation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteConnectionCreationRequest remote_connection_creation_request: (required)
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    def post_remote_connection_with_http_info(self, remote_connection_creation_request, **kwargs):
        """
        Register a new remote connection.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_remote_connection_with_http_info(remote_connection_creation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteConnectionCreationRequest remote_connection_creation_request: (required)
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    async def post_remote_connection_async(self, remote_connection_creation_request, **kwargs):
        """
        Register a new remote connection.

        This method makes an asynchronous HTTP request.

        :param async_req bool
        :param RemoteConnectionCreationRequest remote_connection_creation_request: (required)
        :return: RemoteConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
