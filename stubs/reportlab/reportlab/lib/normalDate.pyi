"""Jeff Bauer's lightweight date class, extended by us.  Predates Python's datetime module."""

from _typeshed import Incomplete
from typing import Final

__version__: Final[str]

def getStdMonthNames(): ...
def getStdShortMonthNames(): ...
def getStdDayNames(): ...
def getStdShortDayNames(): ...
def isLeapYear(year):
    """determine if specified year is leap year, returns Python boolean"""
    ...

class NormalDateException(Exception):
    """Exception class for NormalDate"""
    ...

class NormalDate:
    def __init__(self, normalDate=None) -> None: ...
    def add(self, days) -> None: ...
    def __add__(self, days): ...
    def __radd__(self, days): ...
    def clone(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def day(self):
        """return the day as integer 1-31"""
        ...
    def dayOfWeek(self):
        """return integer representing day of week, Mon=0, Tue=1, etc."""
        ...
    @property
    def __day_of_week_name__(self): ...
    def dayOfWeekAbbrev(self):
        """return day of week abbreviation for current date: Mon, Tue, etc."""
        ...
    def dayOfWeekName(self):
        """return day of week name for current date: Monday, Tuesday, etc."""
        ...
    def dayOfYear(self):
        """day of year"""
        ...
    def daysBetweenDates(self, normalDate):
        """
        return value may be negative, since calculation is
        self.scalar() - arg
        """
        ...
    def equals(self, target): ...
    def endOfMonth(self):
        """returns (cloned) last day of month"""
        ...
    def firstDayOfMonth(self):
        """returns (cloned) first day of month"""
        ...
    def formatUS(self):
        """return date as string in common US format: MM/DD/YY"""
        ...
    def formatUSCentury(self):
        """return date as string in 4-digit year US format: MM/DD/YYYY"""
        ...
    def formatMS(self, fmt):
        """
        format like MS date using the notation
        {YY}    --> 2 digit year
        {YYYY}  --> 4 digit year
        {M}     --> month as digit
        {MM}    --> 2 digit month
        {MMM}   --> abbreviated month name
        {MMMM}  --> monthname
        {MMMMM} --> first character of monthname
        {D}     --> day of month as digit
        {DD}    --> 2 digit day of month
        {DDD}   --> abrreviated weekday name
        {DDDD}  --> weekday name
        """
        ...
    def __hash__(self): ...
    def __int__(self) -> int: ...
    def isLeapYear(self):
        """
        determine if specified year is leap year, returning true (1) or
        false (0)
        """
        ...
    def lastDayOfMonth(self):
        """returns last day of the month as integer 28-31"""
        ...
    def localeFormat(self):
        """override this method to use your preferred locale format"""
        ...
    def month(self):
        """returns month as integer 1-12"""
        ...
    @property
    def __month_name__(self): ...
    def monthAbbrev(self):
        """returns month as a 3-character abbreviation, i.e. Jan, Feb, etc."""
        ...
    def monthName(self):
        """returns month name, i.e. January, February, etc."""
        ...
    def normalize(self, scalar) -> None:
        """convert scalar to normalDate"""
        ...
    def range(self, days):
        """
        Return a range of normalDates as a list.  Parameter
        may be an int or normalDate.
        """
        ...
    def scalar(self):
        """days since baseline date: Jan 1, 1900"""
        ...
    def setDay(self, day) -> None:
        """set the day of the month"""
        ...
    def setMonth(self, month) -> None:
        """set the month [1-12]"""
        ...
    normalDate: Incomplete
    def setNormalDate(self, normalDate) -> None:
        """
        accepts date as scalar string/integer (yyyymmdd) or tuple
        (year, month, day, ...)
        """
        ...
    def setYear(self, year) -> None: ...
    def __sub__(self, v): ...
    def __rsub__(self, v): ...
    def toTuple(self):
        """return date as (year, month, day) tuple"""
        ...
    def year(self):
        """return year in yyyy format, negative values indicate B.C."""
        ...

def bigBang():
    """return lower boundary as a NormalDate"""
    ...
def bigCrunch():
    """return upper boundary as a NormalDate"""
    ...
def dayOfWeek(y, m, d):
    """return integer representing day of week, Mon=0, Tue=1, etc."""
    ...
def firstDayOfYear(year):
    """number of days to the first of the year, relative to Jan 1, 1900"""
    ...
def FND(d):
    """convert to ND if required"""
    ...

Epoch: Incomplete
ND = NormalDate
BDEpoch: Incomplete
BDEpochScalar: int

class BusinessDate(NormalDate):
    """Specialised NormalDate"""
    def add(self, days) -> None:
        """add days to date; use negative integers to subtract"""
        ...
    def __add__(self, days):
        """add integer to BusinessDate and return a new, calculated value"""
        ...
    def __sub__(self, v): ...
    def asNormalDate(self): ...
    def daysBetweenDates(self, normalDate): ...
    def normalize(self, i) -> None: ...
    def scalar(self): ...
    def setNormalDate(self, normalDate) -> None: ...
